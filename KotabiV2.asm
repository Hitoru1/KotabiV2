TITLE Kotabi
.MODEL SMALL
.STACK 100H
.DATA
Chosen_Level_Map  	DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
		  
					
		  
Chosen_Level_Pellet	    DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
						DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
			  
;------------------------ START MAP LVL 1 -----------------------------------			  
Level1_Map  DW 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		  DW 1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1
		  DW 1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1
		  DW 1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1
		  DW 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
		  DW 1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,0,1
		  DW 1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1
		  DW 1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,1,1
		  DW 0,0,0,1,0,1,0,0,0,6,0,0,0,1,0,1,0,0,0
		  DW 1,1,1,1,0,1,0,1,1,4,1,1,0,1,0,1,1,1,1
		  DW 3,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,3
		  DW 1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1
		  DW 0,0,0,1,0,1,0,0,7,0,0,0,0,1,0,1,0,0,0
		  DW 1,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1
		  DW 1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1
		  DW 1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,1
		  DW 1,0,0,1,0,0,0,0,0,5,0,0,0,0,0,1,0,0,1 ;linha 17 | coluna 10
		  DW 1,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,1
		  DW 1,0,9,0,0,1,0,0,0,1,0,0,0,1,0,8,0,0,1
		  DW 1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,1
		  DW 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
		  DW 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		  
Level1_Pellet DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;157 pastilhas
			  DW 0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0
			  DW 0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0
			  DW 0,2,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,2,0
			  DW 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
			  DW 0,1,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0
			  DW 0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0
			  DW 0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0
			  DW 0,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,1,0
			  DW 0,2,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0
			  DW 0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0
			  DW 0,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,0
			  DW 0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0
			  DW 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
			  DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;------------------------ END MAP LVL 1 -----------------------------------	


;------------------------ START MAP LVL 2 -----------------------------------			  
Level2_Map	DW 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
			DW 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
			DW 1,0,1,1,0,1,1,1,1,0,1,1,1,1,0,1,1,0,1
			DW 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
			DW 1,0,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,0,1
			DW 1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1
			DW 1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1
			DW 1,0,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1
			DW 1,0,0,0,0,1,0,0,0,0,0,0,7,1,0,0,0,0,1
			DW 1,0,1,1,1,1,0,1,1,4,1,1,0,1,1,1,1,0,1
			DW 1,0,0,0,0,0,0,1,0,6,0,1,0,0,0,0,0,0,1
			DW 3,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,3
			DW 1,0,0,0,0,0,8,0,0,0,0,0,9,0,0,0,0,0,1
			DW 1,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1
			DW 1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1
			DW 1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,1
			DW 1,0,1,0,1,1,0,1,1,5,1,1,0,1,1,0,1,0,1
			DW 1,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1
			DW 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1
			DW 1,0,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1
			DW 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
			DW 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		  
Level2_Pellet	DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;184
				DW 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
				DW 0,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0
				DW 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
				DW 0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0
				DW 0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0
				DW 0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0
				DW 0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,0
				DW 0,1,1,1,2,0,0,0,0,0,0,0,0,0,2,1,1,1,0
				DW 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
				DW 0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0
				DW 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
				DW 0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0
				DW 0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0
				DW 0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,0
				DW 0,1,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,0
				DW 0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0
				DW 0,1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1,0
				DW 0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0
				DW 0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,1,0
				DW 0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0
				DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;------------------------ END MAP LVL 2 -----------------------------------


;------------------------ START MAP LVL 3 -----------------------------------			  
Level3_Map	DW 1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,1,1
			DW 1,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,1,1
			DW 1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,0,1
			DW 1,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1
			DW 1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1
			DW 1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1
			DW 1,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1
			DW 1,0,1,0,1,0,0,0,1,1,1,0,0,0,1,0,1,0,1
			DW 1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,1,0,1
			DW 1,0,1,0,1,1,6,1,1,4,1,1,7,1,1,0,1,0,1
			DW 3,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,3
			DW 1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1
			DW 1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1
			DW 1,0,1,0,0,0,8,1,1,1,1,1,9,0,0,0,1,0,1
			DW 1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1
			DW 1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1
			DW 1,0,1,1,1,0,1,1,0,5,0,1,1,0,1,1,1,0,1
			DW 1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1
			DW 1,0,0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,1
			DW 1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,1
			DW 1,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1
			DW 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
		  
Level3_Pellet 	DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 166
				DW 0,0,0,1,0,0,0,0,1,2,1,0,0,0,0,1,0,0,0
				DW 0,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0
				DW 0,1,0,0,0,0,1,1,1,0,1,1,1,0,0,0,0,1,0
				DW 0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0
				DW 0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
				DW 0,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0
				DW 0,1,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,1,0
				DW 0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0
				DW 0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0
				DW 0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0
				DW 0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
				DW 0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0
				DW 0,1,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0
				DW 0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0
				DW 0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0
				DW 0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0
				DW 0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,1,0
				DW 0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,1,0
				DW 0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0
				DW 0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0
				DW 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;------------------------ END MAP LVL 3 -----------------------------------			  
		  
		  
		;------------------------------- KOTABI TO THE RIGHT -------------------------------------------------
Pacman	DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		;------------------------------- KOTABI LEFT -------------------------------------------------
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		;------------------------------- KOTABI UP -------------------------------------------------
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
		DW	14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		

		;------------------------------- KOTABI DOWN -------------------------------------------------
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
		DW	14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00

		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
		DW	00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
		DW	00, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
		

PACMAN_DEATH	DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
				DW 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00 
				DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 00, 00, 14, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 14, 00, 00, 14, 00, 00, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00

				DW 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00 
				DW 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14 
				DW 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14 
				DW 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00 
				DW 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00 
				DW 00, 00, 00, 14, 14, 00, 00, 14, 00, 00, 00, 00, 14, 00, 00, 14, 14, 00, 00, 00 
				DW 00, 00, 00, 00, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 00, 00, 00, 00 
				DW 00, 00, 00, 14, 14, 00, 00, 14, 00, 00, 00, 00, 14, 00, 00, 14, 14, 00, 00, 00 
				DW 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00 
				DW 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00 
				DW 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14 
				DW 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14 
				DW 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00 
				DW 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
				DW 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00

		
GHOST_MODEL 	    DW 00, 00, 00, 00, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00, 00, 00, 00, 00 
					DW 00, 00, 00, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00, 00, 00, 00 
					DW 00, 00, 00, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00, 00, 00, 00 
					DW 00, 13, 13, 13, 13, 15, 15, 15, 13, 13, 13, 13, 13, 15, 15, 15, 13, 00, 00, 00 
					DW 00, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 13, 15, 15, 15, 00, 00, 00, 00, 00 
					DW 00, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 13, 15, 15, 15, 00, 00, 00, 00, 00 
					DW 00, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 13, 15, 15, 15, 00, 00, 00, 00, 00 
					DW 13, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 00 
					DW 13, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 13, 15, 15, 15, 00, 00, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 15, 15, 15, 13, 13, 13, 13, 13, 15, 15, 15, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 00, 00, 13, 13, 13, 13, 13, 00, 13, 13, 13, 13, 13, 13, 00 
					DW 13, 13, 13, 13, 13, 00, 00, 13, 13, 13, 13, 13, 00, 13, 13, 13, 13, 13, 13, 00 
					DW 00, 13, 13, 13, 00, 00, 00, 00, 13, 13, 13, 00, 00, 00, 00, 13, 13, 00, 00, 00
					
					DW 00, 00, 00, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00, 00, 00 
					DW 00, 00, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00, 00 
					DW 00, 00, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00, 00 
					DW 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00 
					DW 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00 
					DW 00, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 15, 15, 15, 15, 01, 01, 00, 00, 00 
					DW 00, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 15, 15, 15, 15, 01, 01, 00, 00, 00 
					DW 01, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 15, 15, 15, 15, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 15, 15, 01, 01, 15, 15, 01, 01, 15, 15, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 15, 01, 01, 15, 15, 01, 01, 15, 15, 01, 01, 15, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00 
					DW 01, 01, 01, 01, 01, 00, 00, 01, 01, 01, 01, 01, 00, 01, 01, 01, 01, 01, 00, 00 
					DW 00, 01, 01, 01, 00, 00, 00, 00, 01, 01, 01, 00, 00, 00, 00, 01, 01, 00, 00, 00
					

LIVES	DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00 
		DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00
		
LIVES_WRITTEN	DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15 
				DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00 
				DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00 
				DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00
					
					
Big_ball	    DW 0,0,0,1,1,1,0,0,0
				DW 0,0,1,1,1,1,1,0,0
				DW 0,1,1,1,1,1,1,1,0
				DW 0,1,1,1,1,1,1,1,0
				DW 0,1,1,1,1,1,1,1,0
				DW 0,0,1,1,1,1,1,0,0
				DW 0,0,0,1,1,1,0,0,0
				
normal_ball  	DW 0,0,1,0,0,0
				DW 0,1,1,1,0,0
				DW 0,0,1,0,0,0
				DW 0,0,0,0,0,0
				
MSG_GAME_OVER	DW 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15
				DW 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15
				DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15
				DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15
				DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15
				DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15
				DW 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15
				DW 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15
				DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
				DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
				DW 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15
				DW 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15	

MSG_VICTORY	DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00
			DW 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00
			DW 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14
			DW 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14				
				
				;yve
OPENING DW  00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 00, 00, 00, 00, 04, 04, 04, 04, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 15, 15, 04, 04, 04, 04, 15, 15, 04, 00, 00, 00, 00, 00, 00, 00, 03, 03, 03, 15, 15, 03, 03, 03, 03, 15, 15, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 15, 15, 15, 15, 04, 04, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 03, 03, 15, 15, 15, 15, 03, 03, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 15, 15, 00, 00, 04, 04, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 03, 03, 15, 15, 00, 00, 03, 03, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 15, 15, 00, 00, 04, 04, 15, 15, 00, 00, 04, 00, 00, 00, 00, 00, 03, 03, 03, 15, 15, 00, 00, 03, 03, 15, 15, 00, 00, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 15, 15, 15, 15, 04, 04, 15, 15, 15, 15, 04, 00, 00, 00, 00, 00, 03, 03, 03, 15, 15, 15, 15, 03, 03, 15, 15, 15, 15, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 15, 15, 04, 04, 04, 04, 15, 15, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 15, 15, 03, 03, 03, 03, 15, 15, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 00, 04, 04, 04, 04, 00, 04, 04, 04, 04, 00, 00, 00, 00, 00, 03, 03, 03, 03, 00, 03, 03, 03, 03, 00, 03, 03, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 00, 00, 00, 04, 04, 00, 00, 00, 04, 04, 00, 00, 00, 00, 00, 00, 00, 03, 03, 00, 00, 00, 03, 03, 00, 00, 00, 03, 03, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 15, 15, 05, 05, 05, 05, 15, 15, 05, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 15, 15, 15, 15, 05, 05, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 06, 06, 06, 15, 15, 06, 06, 06, 06, 15, 15, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 15, 15, 00, 00, 05, 05, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 15, 15, 15, 15, 06, 06, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 15, 15, 00, 00, 05, 05, 15, 15, 00, 00, 05, 00, 00, 00, 00, 00, 06, 06, 15, 15, 00, 00, 06, 06, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 15, 15, 15, 15, 05, 05, 15, 15, 15, 15, 05, 00, 00, 00, 00, 06, 06, 06, 15, 15, 00, 00, 06, 06, 15, 15, 00, 00, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 15, 15, 05, 05, 05, 05, 15, 15, 05, 05, 00, 00, 00, 00, 06, 06, 06, 15, 15, 15, 15, 06, 06, 15, 15, 15, 15, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 15, 15, 06, 06, 06, 06, 15, 15, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 05, 05, 00, 05, 05, 05, 05, 00, 05, 05, 05, 05, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 05, 05, 00, 00, 00, 05, 05, 00, 00, 00, 05, 05, 00, 00, 00, 00, 00, 06, 06, 06, 06, 00, 06, 06, 06, 06, 00, 06, 06, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 06, 06, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 00, 00, 15, 00, 15, 00, 15, 00, 00, 15, 15, 00, 00, 00, 15, 15, 15, 00, 00, 15, 15, 15, 00, 00, 00, 15, 15, 15, 00, 15, 15, 15, 00, 00, 15, 00, 00, 15, 00, 00, 15, 00, 00, 15, 00, 00, 15, 15, 00, 00, 15, 00, 00, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 00, 00, 15, 00, 15, 15, 00, 00, 15, 00, 15, 15, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 00, 00, 15, 00, 15, 00, 00, 15, 00, 15, 00, 00, 15, 00, 00, 15, 00, 15, 00, 00, 15, 00, 15, 15, 00, 15, 00, 00, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 15, 15, 00, 00, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 00, 00, 15, 00, 15, 00, 00, 15, 00, 15, 00, 00, 15, 00, 00, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 15, 00, 00, 15, 00, 15, 15, 00, 15, 15, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 15, 00, 00, 00, 00, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 00, 00, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 00, 15, 00, 00, 15, 00, 00, 15, 15, 15, 00, 00, 15, 00, 00, 15, 00, 00, 15, 15, 00, 00, 00, 15, 15, 15, 00, 15, 15, 00, 15, 15, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
	    DW	00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
	







;-----------------------------------
selected_map_id DB 0
pellets_for_chosen_map_total DB 0
map_color_attribute DB ?
;-----------------------------------
    
opening_sequence_controller DW 0
opening_pixel_counter DW ?
opening_pixel_column DW 1
opening_pixel_row DW 1


opening_column_counter DW 0
opening_counter DW ?
opening_start_column DW 10
opening_start_row DW 10


opening_tile_spacing DB 10
opening_tile_spacing2 DB 5


opening_color DB ?



current_color DB ?
map_draw_controller DW 0
pixel_counter DW ?
current_pixel_column DW 1
current_pixel_row DW 1

tile_pixel_column DW 1
tile_pixel_row DW 1
pellet_pixel_counter DW ?

pacman_controller DW 0
animation_frame_controller DW 0
column_counter DW 0
generic_counter DW ?
Current_Column DW 10
Current_Row DW 10

pellet_sprite_draw_controller DW 0

pacman_target_row DW 1
pacman_target_column DW 1

pacman_current_row DW 1
pacman_current_column DW 1
pacman_position_index DW ?
pacman_animation_counter DW ?

tile_spacing_pixels DB 23
tile_spacing_offset DB 5


test_UpArrow_Msg DB 'UP KEY',0AH,0DH,'$'

delay_counter DW ?
animation_delay_counter DW ?

wall_flag DB 0

pacman_direction DW 0

ghost_controller DW 0
current_ghost_row DW 1
current_ghost_column DW 1
ghost_animation_counter DW ?

green_ghost_position DW ?
old_green_ghost_position DW ?

red_ghost_position DW ?
cyan_ghost_position DW ?
magenta_ghost_position DW ?

current_ghost_id DW 6

;-------------
rng_val1 DW 9
rng_val2 DW 3
rng_val3 DW 7
rng_val4 DW 4

generated_random_number DW ?
random_flag DB 0
first_random_generation_flag DB 1
;-------------

;--------------
random_val_green_ghost DW 5
green_ghost_column DW 0
green_ghost_row DW 0

random_val_red_ghost DW 5
red_ghost_column DW 0
red_ghost_row DW 0

random_val_cyan_ghost DW 5
cyan_ghost_column DW 0
cyan_ghost_row DW 0

random_val_magenta_ghost DW 5
magenta_ghost_column DW 0
magenta_ghost_row DW 0
;--------------

current_key_pressed DB 0

lives_counter DB 3
pellets_collected_counter DB 0

;------------------------
fear_mode_controller DW 0
fear_mode_counter DW 0
power_pellet_flag DW 0

power_pellet_active_state DW 0
power_pellet_duration DW ?

pellet_effect_timer_storage DW ?
time_before_event DW ?
time_after_event DW ?
;------------------------

test_row DW ?
test_column DW ?

death_animation_controller DW 0

lives_display_controller DW 0

;-----------------------
text_tile_spacing DB 2
text_pixel_column DW 1
text_pixel_row DW 1
text_char_pixel_spacing DB ?
text_tile_column DW 0
text_tile_row DW 0
text_tile_counter DW ?
;-----------------------

;---------------
game_over_controller DW 0
game_over_message_row DW 0
game_over_message_column DW 0
game_over_counter DW 0
;---------------
square_pixel_counter DW ?
char_pixel_draw_column DW ?
char_pixel_draw_row    DW ?
;---------------------------------------------------------------------------------------------------------------
NUMBER0_SPRITE DW 0,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,0



NUMBER1_SPRITE DW 0,0,0,1,0,0,0
                    DW 0,0,1,1,0,0,0
                    DW 0,1,0,1,0,0,0
                    DW 1,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 1,1,1,1,1,1,1
                    
                    
                    
NUMBER2_SPRITE DW 1,1,1,1,1,1,0
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,1,0
                    DW 0,0,0,0,1,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,1,0,0,0,0
                    DW 0,1,0,0,0,0,0
                    DW 1,0,0,0,0,0,0
                    DW 1,1,1,1,1,1,1
                    
                    
                    
NUMBER3_SPRITE DW 1,1,1,1,1,1,0
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,1,1
                    DW 0,0,0,1,1,1,0
                    DW 0,0,0,0,0,1,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 1,1,1,1,1,1,0
            
            
            
NUMBER4_SPRITE DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
            
            
            
NUMBER5_SPRITE DW 1,1,1,1,1,1,1
                    DW 1,0,0,0,0,0,0
                    DW 1,0,0,0,0,0,0
                    DW 1,0,0,0,0,0,0
                    DW 1,1,1,1,1,1,0
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 1,1,1,1,1,1,0
            
            
            
NUMBER6_SPRITE DW 0,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,0
                    DW 1,0,0,0,0,0,0
                    DW 1,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,0
                    
                    
                    
NUMBER7_SPRITE DW 1,1,1,1,1,1,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,1,0
                    DW 0,0,0,0,0,1,0
                    DW 0,0,0,0,1,0,0
                    DW 0,0,0,0,1,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    DW 0,0,0,1,0,0,0
                    
                    
                    
NUMBER8_SPRITE DW 0,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,0
                    
                    
                    
NUMBER9_SPRITE DW 0,1,1,1,1,1,0
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 0,0,0,0,0,0,1
                    DW 1,0,0,0,0,0,1
                    DW 0,1,1,1,1,1,0







SCORE_TEXT_SPRITE DW      0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1
                  DW      1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
                  DW      1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
                  DW      1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
                  DW      1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0
                  DW      0,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0
                  DW      0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0
                  DW      0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0
                  DW      0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0
                  DW      0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0
                  DW      1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1

; SCORE_DIGIT_S DW 0 ; Old
; SCORE_DIGIT_B DW 0 ; Old
; SCORE_DIGIT_L DW 0 ; Old
; SCORE_DIGIT_Q DW 0 ; Old

Score_Digit_Thousands DW 0
Score_Digit_Hundreds  DW 0
Score_Digit_Tens      DW 0
Score_Digit_Units     DW 0

SCORE_POINTS DW 0

Quadrant_Column DW 0
Quadrant_Row DW 0
Quadrant_Size DW ?
GRID_MATRIX DW 0
COLOR_VAR DB 0
COLUMN_PLUS_OFFSET DW 0
ROW_PLUS_OFFSET DW 0
VALUE_X_DIGIT DW 0

score_digit_draw_controller DW 0
total_score DW 0

;------------------- START MAIN MENU -------------------------
menu_pixel_counter DW ?
menu_pixel_column DW 1
menu_pixel_row DW 1


menu_column_counter DW 0
menu_counter DW ?
menu_start_column DW 10
menu_start_row DW 10


menu_tile_spacing DB 10
menu_tile_spacing2 DB 5


menu_color DB ?


PACMAN_MENU_SPRITE DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
                     DW     00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00
            
            
            ;ROW DW 0
            ;COLUMN DW 0
            ;COUNTER DW 0
             MENU_CONTROLLER DW 0
             MENU_PACMAN_CONTROLLER DW 0
            ;PIXEL_ROW DW 1
            ;PIXEL_COLUMN DW 1
             menu_pacman_controller_var dw 0
             menu_pacman_erase_controller dw 0
             menu_pacman_column dw 0
             menu_pacman_row dw 0
             menu_pacman_counter dw 0
            
;------------------- END MAIN MENU -------------------------

DIFFICULTY_TEXT_SPRITE DW 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15
                         DW 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
                         DW 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
                         DW 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
                         DW 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00
            
MAP1_TEXT_SPRITE  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15
                
MAP2_TEXT_SPRITE  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15

MAP3_TEXT_SPRITE  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00

                
MENU_ARROW_SPRITE DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 00, 00, 00, 00, 00, 00
                  DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00
                  DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 00, 00, 00, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00
                  DW      15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 00
                  DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 00, 00, 00, 00
                  DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00
                  DW      00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 00, 00, 00, 00, 00, 00
                
difficulty_pixel_column DW 0
difficulty_pixel_row DW 0
difficulty_controller DW 0
difficulty_pixel_counter DW 0
difficulty_color DB 0


difficulty1_column_counter DW 0
difficulty1_pixel_column DW 0
difficulty1_counter DW 0
difficulty1_tile_spacing DW 10
difficulty1_column DW 0
difficulty1_row DW 0

difficulty1_pixel_row DW 0

menu_arrow_controller dw 0
menu_arrow_counter DW 0



menu_arrow1_row dw 0
menu_arrow1_column dw 0
menu_arrow_erase_controller dw 0


;---------------------------------------------------------------------------------------------------------------
MENU_TEXT_SPRITE  dw 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06
                  dw 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 00, 00, 06, 06, 00, 00, 00, 00, 06, 06, 00, 00, 06, 06, 06, 06, 06, 06, 06, 06, 06, 06




LEVELS_TEXT_SPRITE  DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14 
                    DW 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14 
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14 
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14

                

                
                
CREDITS_TEXT_SPRITE   DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00 ;66
                        DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                        DW 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 15, 15
                        DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15
                        DW 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 00, 00, 00, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 00, 00, 15, 15, 15, 15, 15, 15, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 00, 00, 00, 00, 00, 00, 15, 15, 15, 15, 15, 15, 15, 15, 15

                    
                    
EXIT_TEXT_SPRITE    dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 00, 00, 00, 14, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 ;35
                      dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 14, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 00, 14, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                      dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 00, 00, 00, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00 
                
                
                
PACMAN_TEXT_SPRITE  DW 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00   
                    DW 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00   
                    DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 15, 15, 00, 00, 14, 14, 00, 00   
                    DW 00, 00, 14, 14, 14, 14, 14, 14, 14, 15, 15, 00, 00, 14, 14, 00, 00   
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 00, 00, 14, 14, 14, 14   ;17
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 00, 00, 14, 14, 14, 14   
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00   
                    DW 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00   
                    DW 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00   
                    DW 00, 00, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00   
                    DW 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00   
                    DW 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00   
                                                                        
                                                                        
main_menu_option DW 1
;------------------------------------------------------------------------------------------------------

;----------- CREDITS YVE-----------------------------------------------------------------
                            
                            
CREDITS_SANFINS_TEXT_SPRITE dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 ;79
					        dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 14, 14, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 
					        dw 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00

                    
;CREDITS_MENESES_TEXT_SPRITE  DW 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14
;                           DW 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 14
;                           DW 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00 ;84
;                           DW 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00
;                           DW 14, 14, 00, 00, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 00, 00, 00, 00, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 14, 00, 00, 14, 14, 14, 14, 14, 14, 14, 00, 14, 14, 00, 00, 00, 00, 14, 14, 14, 14, 14, 14, 00, 00, 00

;----------- CREDITS -----------------------------------------------------------------


FRUIT_SPRITE DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 06, 06, 06
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 06, 06, 06, 06, 00, 00, 06, 00, 00, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 00, 00, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00, 00, 06, 00, 00, 00, 00
             DW 00, 00, 04, 04, 04, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00
             DW 00, 00, 04, 04, 04, 06, 06, 00, 00, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00
             DW 04, 04, 04, 04, 04, 06, 06, 04, 04, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00
             DW 04, 04, 04, 04, 04, 06, 06, 04, 04, 00, 00, 00, 00, 06, 06, 00, 00, 00, 00, 00
             DW 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 04, 04, 06, 06, 04, 00, 00, 00, 00
             DW 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00, 04, 04, 06, 06, 04, 00, 00, 00, 00
             DW 04, 04, 15, 15, 04, 04, 04, 00, 00, 04, 04, 04, 04, 06, 06, 04, 04, 04, 00, 00
             DW 04, 04, 15, 15, 04, 04, 04, 00, 00, 04, 04, 04, 04, 06, 06, 04, 04, 04, 00, 00
             DW 00, 00, 04, 04, 04, 04, 04, 00, 00, 04, 04, 04, 04, 04, 04, 04, 04, 04, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 15, 15, 04, 04, 04, 04, 04, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 15, 15, 04, 04, 04, 04, 04, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 00, 00, 00, 00
             DW 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 04, 04, 04, 04, 04, 00, 00, 00, 00



;---------------------------------------------------------------------------------------------------------------

.CODE

MAIN_PROC PROC

MOV AX,@DATA
MOV DS,AX

MOV AX, 4F02H  ; VESA BIOS Extension - Set VESA Video Mode
MOV BX, 103H   ; Video mode (e.g., 800x600 256 colors, or 640x480 256 colors)
INT 10H        ; Video interrupt

;--------------------------------PRINTING OPENING----------------------------------------

CALL PRINT_OPENING_SEQUENCE_PROCEDURE
MOV AH, 01H    ; BIOS teletype output - wait for key with echo
INT 21H        ; DOS interrupt
JNZ clear_key_buffer ; Jump if key pressed (non-zero in AL)
clear_key_buffer:
CALL CLEAR_SCREEN_PROCEDURE



MOV AX, 4F02H  ; VESA BIOS Extension - Set VESA Video Mode
MOV BX, 103H   ; Video mode
INT 10H        ; Video interrupt
;------------------------------------------------------------------------------------------------------------------
start_main_menu:
;------- resetting game variables ----------
MOV total_score,0
MOV lives_counter,3
;-------------------------------------------------
    
    
MOV main_menu_option, 1

mov current_pixel_column,400
mov current_pixel_row,10
CALL PRINT_MENU_TEXT_SPRITE1_PROCEDURE ; (Assuming menu_ESCRITO1 is a call to draw the MENU_TEXT_SPRITE)

mov current_pixel_column,55
mov current_pixel_row,70
CALL PRINT_LEVELS_TEXT_SPRITE_PROCEDURE ; (Assuming levels_ESCRITO is a call to draw LEVELS_TEXT_SPRITE)

mov current_pixel_column,55
mov current_pixel_row,110
CALL PRINT_CREDITS_TEXT_SPRITE1_PROCEDURE ; (Assuming CREDITS_ESCRITO1 draws CREDITS_TEXT_SPRITE)

mov current_pixel_column,55
mov current_pixel_row,150
CALL PRINT_EXIT_TEXT_SPRITE1_PROCEDURE ; (Assuming EXIT_ESCRITO1 draws EXIT_TEXT_SPRITE)

mov current_pixel_column,20
mov current_pixel_row,70

;--------------------------
CALL PRINT_PACMAN_TEXT_SPRITE1_PROCEDURE ; (Assuming PACMAN_ESCRITO1 draws PACMAN_TEXT_SPRITE as menu cursor)
    
main_menu_input_loop:


MOV AH, 00H    ; Get keystroke
INT 16H        ; Keyboard interrupt

CMP AL, 13     ; Compare AL with ASCII for Enter key
JE end_main_menu_loop ; Jump if Enter pressed
    
CMP AH, 50H    ; Scan code for Down Arrow key
JE MAIN_MENU_DOWN_ARROW

CMP AH, 48H    ; Scan code for Up Arrow key
JE MAIN_MENU_UP_ARROW
    
JMP main_menu_input_loop

    
MAIN_MENU_DOWN_ARROW:
                        CMP main_menu_option,3
                        JE main_menu_input_loop ; If option is already 3, do nothing
                                
                        ;IF IT IS LESS THAN 3
                        INC main_menu_option
                        CALL ERASE_PACMAN_MENU_CURSOR_PROCEDURE ; (Assumed name for APAGA_PACMAN_MENU)
                        ADD current_pixel_row,40

                        CALL PRINT_PACMAN_TEXT_SPRITE1_PROCEDURE
                        JMP main_menu_input_loop
    
MAIN_MENU_UP_ARROW:
                        CMP main_menu_option,1
                        JE main_menu_input_loop ; If option is already 1, do nothing
                                
                        ;IF IT IS GREATER THAN 1
                        DEC main_menu_option

                        CALL ERASE_PACMAN_MENU_CURSOR_PROCEDURE
                        SUB current_pixel_row,40

                        CALL PRINT_PACMAN_TEXT_SPRITE1_PROCEDURE
                        JMP main_menu_input_loop

end_main_menu_loop:
                                
                        ;MOV AH,4CH      ; Terminate program
                        ;INT 21H
;------------------------------------------------------------------------------------------------------------------
MOV AX, 4F02H  ; VESA BIOS Extension - Set VESA Video Mode
MOV BX, 103H   ; Video mode
INT 10H        ; Video interrupt


CMP main_menu_option,1
JE OPTION_LEVELS

CMP main_menu_option,2
JE OPTION_CREDITS

CMP main_menu_option,3
JE OPTION_EXIT

OPTION_LEVELS:  CALL DISPLAY_DIFFICULTY_MENU_PROCEDURE
                ;CALL ZERO_MATRIX ; (Original comment: CALL RESET_MATRIX)
                CALL CHOOSE_MAP_PROCEDURE
                JMP LOAD_GAME

OPTION_CREDITS: CALL DISPLAY_CREDITS_SCREEN_PROCEDURE

                MOV AX, 4F02H
                MOV BX, 103H
                INT 10H

                JMP start_main_menu

OPTION_EXIT:    JMP END_OF_GAME


LOAD_GAME:
;------------------------------ START PRINTING MAP ---------------------------------------------
XOR SI,SI
XOR BX,BX
MOV current_pixel_row, 1
MOV current_pixel_column, 1

MOV pixel_counter, 418 ;quantity of items in the matrix (map tiles)

DRAW_MAP_LOOP:

MOV AX, Chosen_Level_Map[BX]

CMP map_draw_controller,19 ;number of columns
JNE DONT_SKIP_NEWLINE_MAP
;skip line
MOV map_draw_controller,0
MOV current_pixel_column,1
INC current_pixel_row

DONT_SKIP_NEWLINE_MAP:

CMP AX,1  ; Wall
JE DRAW_WALL_TILE

CMP AX,4  ; Ghost Door
JE DRAW_GHOST_DOOR_TILE
      ;BLACK (Empty space)
      MOV current_color,0
      CALL DRAW_SQUARE_TILE
      JMP END_DRAW_TILE_LOGIC

DRAW_WALL_TILE: ; (Original comment likely meant "wall color", not "black")
      MOV DL, map_color_attribute
      MOV current_color, DL
      CALL DRAW_SQUARE_TILE
      JMP END_DRAW_TILE_LOGIC
DRAW_GHOST_DOOR_TILE:
      MOV current_color,7 ; Gray
      CALL DRAW_SQUARE_TILE
      
END_DRAW_TILE_LOGIC:
INC current_pixel_column

ADD BX,2 ; Move to next word in map array

INC map_draw_controller
DEC pixel_counter
CMP pixel_counter,0
JNZ DRAW_MAP_LOOP
;------------------------------ END PRINTING MAP ---------------------------------------------

;------------------------------ CALLING PELLETS ---------------------------------------------
CALL DRAW_PELLETS_PROCEDURE
;------------------------------ CALLING PELLETS ---------------------------------------------

;------------------------------- START KEY VERIFICATION AND GAME LOOP ---------------------------------------------
    MOV current_pixel_column, 490
    MOV current_pixel_row, 100
    CALL PRINT_LIVES_TEXT_SPRITE_PROCEDURE
    
    MOV current_pixel_column, 490
    MOV current_pixel_row, 130
    CALL PRINT_LIVES_ICON_PROCEDURE

    MOV current_pixel_column, 530
    CALL PRINT_LIVES_ICON_PROCEDURE
    
    MOV current_pixel_column, 490
    MOV current_pixel_row, 50
    CALL DRAW_SIDE_PANEL_SCORE_TEXT_PROCEDURE
    
    CALL PRINT_FRUIT_SPRITE_PROCEDURE
    MOV BX, 476 ; Index for fruit position on pellet map
    MOV Chosen_Level_Pellet[BX], 5 ; 5 might represent fruit
    
    CALL DRAW_PACMAN_SPRITE
    XOR DX,DX

GAME_LOOP_START:
    
    ;PUSH BX
    ;CALL REPLACE_PELLETS_PROCEDURE
    ;POP BX
    
    ; CALL GET_TIME_PROCEDURE
    ; SUB AX, 0 ; (Likely part of time comparison logic)
    
    ; CMP AX, 10 ; (10 seconds for example)
    ; JBE CONTINUE_GAME_LOOP_FRUIT_CHECK
    
    ; ;IF MORE THAN 10 SECONDS HAVE PASSED
    ; CALL PRINT_FRUIT_SPRITE
    ; MOV BX, 260 ; Another index for fruit
    ; MOV Chosen_Level_Pellet[BX], 5
    
    ; CONTINUE_GAME_LOOP_FRUIT_CHECK:
    
    MOV current_pixel_row,75
    CALL DRAW_SIDE_PANEL_SCORE_DIGITS_PROCEDURE
    
    CALL DRAW_PACMAN_SPRITE
    CALL MOVE_GHOSTS_PROCEDURE
    
    MOV DH, current_key_pressed
    
    ;----- Keyboard Input -----
    MOV AH, 01H ; Check keyboard buffer
    INT 16H     ; Keyboard interrupt
    ;--------------------------- 
    JZ  CONTINUE_PROCESS_KEY_INPUT ; Jump if buffer is empty (Zero Flag set)
        ;If there is something in the buffer
        
        
        MOV BX, pacman_position_index
        CALL CHECK_WALL_COLLISION_PROCEDURE
        
        MOV AH, 00H ; Get keystroke (consumes it from buffer)
        INT 16H
        
        CMP wall_flag,1
        JE CONTINUE_PROCESS_KEY_INPUT ; If wall collision, ignore new key for this movement cycle
        ;IF IT IS NOT WALL
        
        MOV DH,AH ; AH contains scan code of new key
        MOV current_key_pressed, DH
    
CONTINUE_PROCESS_KEY_INPUT:
    CALL CHECK_LARGE_PELLET_PROCEDURE

    ;- DEFEAT -----------------
    CMP lives_counter,0
    JE DEFEAT_CONDITION
    ;---------------------------
    
    ;- VICTORY -----------------
    MOV CL, pellets_for_chosen_map_total ; Assuming this holds total pellets for the map
    
    CMP pellets_collected_counter, CL
    JE VICTORY_CONDITION
    ;---------------------------
    
    CMP DH,48H ; Scan code for Up Arrow key
    JE ACTION_UP_ARROW
    
    CMP DH,4BH ; Scan code for Left Arrow key
    JE ACTION_LEFT_ARROW
    
    CMP DH,4DH ; Scan code for Right Arrow key
    JE ACTION_RIGHT_ARROW
    
    CMP DH,50H ; Scan code for Down Arrow key
    JE ACTION_DOWN_ARROW
    
    CMP AL, 27 ; ASCII for Escape key
    JNE GAME_LOOP_START ; If not ESC, continue loop
    
    
JMP END_PACMAN_GAME_LOOP


ACTION_UP_ARROW:    MOV pacman_direction,4800 ; Sprite offset for up
                    CALL FUNCTION_UP_ARROW_PROCEDURE
                    JMP GAME_LOOP_START

    
ACTION_LEFT_ARROW:  MOV pacman_direction,2400 ; Sprite offset for left
                    CALL FUNCTION_LEFT_ARROW_PROCEDURE
                    JMP GAME_LOOP_START
    
ACTION_RIGHT_ARROW: MOV pacman_direction,0    ; Sprite offset for right
                    CALL FUNCTION_RIGHT_ARROW_PROCEDURE
                    JMP GAME_LOOP_START
    
ACTION_DOWN_ARROW:  MOV pacman_direction,7200 ; Sprite offset for down
                    CALL FUNCTION_DOWN_ARROW_PROCEDURE
                    JMP GAME_LOOP_START
                
DEFEAT_CONDITION:   MOV current_pixel_column, 200
                    MOV current_pixel_row, 305
                    CALL PRINT_GAME_OVER_MESSAGE_PROCEDURE
                
                    MOV     CX, 001EH      ; High word of interval (microseconds)
                    MOV     DX, 8480H      ; Low word of interval (2,000,000 us = 2 seconds)
                    MOV     AH, 86H        ; BIOS Wait function
                    INT     15H            ; System Services interrupt

                    CALL CLEAR_SCREEN_PROCEDURE
                    JMP END_PACMAN_GAME_LOOP
                
VICTORY_CONDITION:  MOV current_pixel_column, 200
                    MOV current_pixel_row, 305
                    CALL PRINT_VICTORY_MESSAGE_PROCEDURE
                
                    MOV     CX, 001EH
                    MOV     DX, 8480H
                    MOV     AH, 86H
                    INT     15H

                    CALL CLEAR_SCREEN_PROCEDURE
                    JMP END_PACMAN_GAME_LOOP
                
END_PACMAN_GAME_LOOP:

MOV AX, 4F02H
MOV BX, 103H
INT 10H

;JMP start_main_menu


;------------------------------- END KEY VERIFICATION ---------------------------------------------
xor al, al  ; al = 0
;mov cx, 10  ; column
;mov dx, 20  ; row
;mov ah, 0dh ; get pixel
;int 10h

; pause the screen for dos compatibility:

;wait for keypress
  ;mov ah,00
  ;int 16h          

; return to text mode:
  mov ah,00h ; set display mode function.
  mov al,03h ; normal text mode 3 (80x25 text)
  int 10h    ; set it!
 
END_OF_GAME:
MOV AH,4CH   ; Terminate program
INT 21H      ; DOS interrupt

MAIN_PROC ENDP

;-------------------- START DRAW_SQUARE_TILE --------------------;
DRAW_SQUARE_TILE PROC
PUSH AX
PUSH BX
PUSH CX
PUSH DX

XOR SI,SI
XOR BX,BX
MOV column_counter,0
MOV generic_counter, 484 ; Total pixels in a 22x22 tile (22*22=484)

MOV AX,current_pixel_column
MUL tile_spacing_pixels ; AX = current_pixel_column * tile_spacing_pixels
MOV Current_Column, AX  ; Using the previously translated "Current_Column"

MOV AX,current_pixel_row
MUL tile_spacing_pixels ; AX = current_pixel_row * tile_spacing_pixels
MOV Current_Row, AX     ; Using the previously translated "Current_Row"

DRAW_SQUARE_PIXEL_LOOP:
CMP column_counter,22 ; Assuming 22 is tile_width_in_pixels
JNE DONT_SKIP_SQUARE_NEWLINE
;skip line (new row within the tile)

MOV column_counter,0
MOV AX,current_pixel_column
MUL tile_spacing_pixels
MOV Current_Column, AX


INC Current_Row

DONT_SKIP_SQUARE_NEWLINE:
      ;printing
      mov cx, Current_Column  ; column for BIOS
      mov dx, Current_Row     ; row for BIOS
      mov al, current_color   ; CHOSEN COLOR
      mov ah, 0Ch             ; BIOS put pixel function
      int 10h                 ; Video interrupt

INC Current_Column

ADD BX,2 ; Unused here, but kept from original structure

INC column_counter
DEC generic_counter
CMP generic_counter,0
JNZ DRAW_SQUARE_PIXEL_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_SQUARE_TILE ENDP
;-------------------- END DRAW_SQUARE_TILE --------------------;

;----------------------- START DRAW_PACMAN_SPRITE -----------------------------;
DRAW_PACMAN_SPRITE PROC


;-------- LOOKING FOR PACMAN TO BE ERASED -----------
XOR SI,SI
XOR BX,BX
MOV current_pixel_column,1
MOV current_pixel_row,1
MOV map_draw_controller,0

MOV pixel_counter, 418 ;quantity of items in the matrix

PACMAN_ERASE_SCAN_LOOP:

MOV AX, Chosen_Level_Map[BX]

CMP map_draw_controller,19 ;number of columns
JNE DONT_SKIP_PACMAN_ERASE_NEWLINE
;skip line
MOV map_draw_controller,0
MOV current_pixel_column,1
INC current_pixel_row

DONT_SKIP_PACMAN_ERASE_NEWLINE:
PUSH BX

;CMP AX,5   ; Pacman marker
;JE ANIMATE_PACMAN_SPRITE_HANDLER ; This was likely a misplace, erase logic is separate

CMP AX,2 ; Erase Pacman marker
JE ERASE_PIXEL_AT_LOCATION

JMP END_PACMAN_ERASE_CHECK_TILE

            
; ANIMATE_PACMAN_SPRITE_HANDLER: ;value 5 (Pacman)
            
             ; CALL DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE
            
             ; JMP END_PACMAN_ERASE_CHECK_TILE
             
            
ERASE_PIXEL_AT_LOCATION: MOV current_color,0 ; Black
                         CALL DRAW_SQUARE_TILE
                         MOV Chosen_Level_Map[BX],0 ; Clear the marker
      
END_PACMAN_ERASE_CHECK_TILE:

POP BX

INC current_pixel_column

ADD BX,2

INC map_draw_controller
DEC pixel_counter
CMP pixel_counter,0
JNZ PACMAN_ERASE_SCAN_LOOP

;-------- LOOKING FOR CURRENT GAME OBJECTS (PACMAN, GHOSTS) TO DRAW -----------
XOR SI,SI
XOR BX,BX
MOV current_pixel_column,1
MOV current_pixel_row,1
MOV map_draw_controller,0

MOV pixel_counter, 418 ;quantity of items in the matrix

GAME_OBJECT_DRAW_SCAN_LOOP:

MOV AX, Chosen_Level_Map[BX]

CMP map_draw_controller,19 ;number of columns
JNE DONT_SKIP_OBJECT_DRAW_NEWLINE
;skip line
MOV map_draw_controller,0
MOV current_pixel_column,1
INC current_pixel_row

DONT_SKIP_OBJECT_DRAW_NEWLINE:
PUSH BX

CMP AX,5    ; Pacman marker
JE ANIMATE_PACMAN_SPRITE_HANDLER

CMP AX,9    ; Magenta Ghost marker
JE ANIMATE_MAGENTA_GHOST_SPRITE

CMP AX,8    ; Red Ghost marker
JE ANIMATE_RED_GHOST_SPRITE

CMP AX,7    ; Cyan Ghost marker
JE ANIMATE_CYAN_GHOST_SPRITE

CMP AX,6    ; Green Ghost marker
JE ANIMATE_GREEN_GHOST_SPRITE

; CMP AX,2 ; Erase marker - already handled above
; JE ERASE_PIXEL_AT_LOCATION

JMP END_GAME_OBJECT_DRAW_CHECK_TILE
    
ANIMATE_PACMAN_SPRITE_HANDLER: ;value 5 (Pacman)
            MOV pacman_position_index, BX
            CALL DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE
            JMP END_GAME_OBJECT_DRAW_CHECK_TILE

ANIMATE_MAGENTA_GHOST_SPRITE: ;ghost on map is 9
            MOV current_color,13
            
                MOV DX,current_pixel_column
                MOV magenta_ghost_column,DX
                
                MOV DX,current_pixel_row
                MOV magenta_ghost_row,DX
            
            MOV magenta_ghost_position, BX
            CALL DRAW_GHOST_IMAGE_FRAMES_PROCEDURE
            JMP END_GAME_OBJECT_DRAW_CHECK_TILE


ANIMATE_RED_GHOST_SPRITE: ;ghost on map is 8
            MOV current_color,4 
            
                MOV DX,current_pixel_column
                MOV red_ghost_column,DX
                
                MOV DX,current_pixel_row
                MOV red_ghost_row,DX
            
            MOV red_ghost_position, BX
            CALL DRAW_GHOST_IMAGE_FRAMES_PROCEDURE
            JMP END_GAME_OBJECT_DRAW_CHECK_TILE

TARGET_GAME_OBJECT_DRAW_SCAN_LOOP_LOLA: JMP GAME_OBJECT_DRAW_SCAN_LOOP ; Original label was LOLA, jumping to original VEZES_pacman7
            
ANIMATE_CYAN_GHOST_SPRITE:
            MOV current_color,3 
            
                MOV DX,current_pixel_column
                MOV cyan_ghost_column,DX
                
                MOV DX,current_pixel_row
                MOV cyan_ghost_row,DX
            
            MOV cyan_ghost_position, BX
            CALL DRAW_GHOST_IMAGE_FRAMES_PROCEDURE
            JMP END_GAME_OBJECT_DRAW_CHECK_TILE
            
ANIMATE_GREEN_GHOST_SPRITE:
            MOV current_color,10  

                MOV DX,current_pixel_column
                MOV green_ghost_column,DX
                
                MOV DX,current_pixel_row
                MOV green_ghost_row,DX
            
            MOV green_ghost_position, BX
            CALL DRAW_GHOST_IMAGE_FRAMES_PROCEDURE
            JMP END_GAME_OBJECT_DRAW_CHECK_TILE
            
            
; ERASE_PIXEL_AT_LOCATION: MOV current_color,0
            ; CALL DRAW_SQUARE_TILE
            ; MOV Chosen_Level_Map[BX],0
    
END_GAME_OBJECT_DRAW_CHECK_TILE:

POP BX

INC current_pixel_column

ADD BX,2

INC map_draw_controller
DEC pixel_counter
CMP pixel_counter,0
JNZ TARGET_GAME_OBJECT_DRAW_SCAN_LOOP_LOLA ; Original JNZ LOLA

RET
DRAW_PACMAN_SPRITE ENDP
;----------------------- END DRAW_PACMAN_SPRITE -----------------------------;

;----------------------- START DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE -----------------------------;
DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE PROC

PUSH AX
        
        MOV AX,current_pixel_column
        MOV pacman_current_column,AX
        
        MOV AX,current_pixel_row
        MOV pacman_current_row,AX
        
        MOV pacman_animation_counter,0
        
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        
        MOV BX, pacman_direction
        MOV generic_counter, 1200 ;quantity of items in the sprite data section

        PACMAN_ANIMATION_PIXEL_LOOP: ; Original VEZES2_PACMAN

        MOV AX, Pacman[BX]

        ;--------------------- START ANIMATION FRAME 2 LOGIC -------------------------------
        CMP animation_frame_controller,400 ;number of elements for one frame
        JNE DONT_ADVANCE_PACMAN_FRAME2_LOGIC
        ;advance frame (original comment: pula linha)
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_PACMAN_FRAME2_LOGIC: ; Original nao_pula_ANIMA
        
        ;--------------------- END ANIMATION FRAME 2 LOGIC -------------------------------
        
        ;--------------------- START ANIMATION FRAME 3 LOGIC -------------------------------
        CMP animation_frame_controller,800 ;number of elements for two frames
        JNE DONT_ADVANCE_PACMAN_FRAME3_LOGIC
        ;advance frame (original comment: pula linha)
        
        CALL ANIMATION_DELAY_PROCEDURE
        MOV animation_frame_controller,0
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_PACMAN_FRAME3_LOGIC: ; Original nao_pula_ANIMA2
        
        ;--------------------- END ANIMATION FRAME 3 LOGIC -------------------------------
        
        ;----------------------- RESETTING TO COLUMN 0 FOR SPRITE DRAWING (NEW ROW IN SPRITE) -------- (Original comment: VOLTANDO PARA CULUNA 0)
        CMP pacman_animation_counter,20 ;number of columns in sprite
        JNE DONT_NEWLINE_PACMAN_SPRITE_DRAW_LOGIC
        ;new line in sprite (original comment: pula linha)
        MOV pacman_animation_counter,0
        
        CALL RESET_PACMAN_COLUMN_PROCEDURE
        
        INC Current_Row
        DONT_NEWLINE_PACMAN_SPRITE_DRAW_LOGIC: ; Original nao_pula2_PACMAN
        ;----------------------- RESETTING TO COLUMN 0 FOR SPRITE DRAWING ---------------------------------
        
        CMP AX,14
        JE DRAW_YELLOW_PACMAN_PIXEL_HANDLER
                ;BLACK (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                ;mov al, 0             ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_CURRENT_PACMAN_PIXEL_HANDLER

        DRAW_YELLOW_PACMAN_PIXEL_HANDLER: ;YELLOW (Original comment: AMARELO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 14              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_CURRENT_PACMAN_PIXEL_HANDLER: ; Original fim2_PACMAN
        INC Current_Column

        ADD BX,2

        INC pacman_animation_counter
        INC animation_frame_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ PACMAN_ANIMATION_PIXEL_LOOP ; Original JNZ VEZES2_PACMAN

RET
DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE ENDP
;----------------------- END DRAW_PACMAN_IMAGE_FRAMES_PROCEDURE -----------------------------;

;---------------------- START DRAW_GHOST_IMAGE_FRAMES_PROCEDURE ------------------------; (Original comment: INICIO FANTASMA IMAGEM)
DRAW_GHOST_IMAGE_FRAMES_PROCEDURE PROC

PUSH AX

        ; CMP current_color,10
        ; JNE CONTINUE_PRINT_GHOST_SETUP_COMMENT
        
        ; MOV AX,current_pixel_column
        ; MOV current_ghost_column,AX
        
        ; MOV AX,current_pixel_row
        ; MOV current_ghost_row,AX
    
        ; CONTINUE_PRINT_GHOST_SETUP_COMMENT: (Original: CONTINUA_PRINT_FANTASMA)
        MOV ghost_animation_counter,0
        
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV BX, power_pellet_active_state ; Original: pastilha_ativa
        MOV generic_counter, 400 ;quantity of items in the sprite data (Original comment: quantidade de itens da matriz)
    
        GHOST_ANIMATION_PIXEL_LOOP: ; Original VEZES2_FANTASMA
    
        MOV AX, GHOST_MODEL[BX] ; Original: FANTASMA_MODELO
    
        CMP ghost_animation_counter,20 ;number of columns in sprite
        JNE DONT_NEWLINE_GHOST_SPRITE_DRAW_LOGIC
        ;new line in sprite (original comment: pula linha)
        MOV ghost_animation_counter,0
        
        PUSH AX
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
        DONT_NEWLINE_GHOST_SPRITE_DRAW_LOGIC: ; Original nao_pula2_FANTASMA
    
        CMP AX,13
        JE DRAW_GHOST_BODY_PIXEL_HANDLER ; Original: CORPO_FANTASMA
        CMP AX,15
        JE DRAW_GHOST_EYES_PIXEL_HANDLER ; Original: OLHOS 
        CMP AX,01
        JE DRAW_SCARED_GHOST_BODY_PIXEL_HANDLER ; Original: CORPO_PASTILHA
        
        ;BLACK (Original comment: PRETO)
        mov cx, Current_Column  ; column
        mov dx, Current_Row     ; row
        mov al, 00              ; WHITE (Original comment)
        mov ah, 0Ch             ; put pixel
        int 10h
        JMP END_DRAW_CURRENT_GHOST_PIXEL_HANDLER
        
        
GHOST_DRAW_PIXEL_LOOP_TARGET_LOLA3: JMP GHOST_ANIMATION_PIXEL_LOOP ; Original label was LOLA3, jumping to original VEZES2_FANTASMA
        
        DRAW_GHOST_BODY_PIXEL_HANDLER: ;MAGENTA GHOST (Original comment: FANTASMA MAGENTA)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, current_color   ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        JMP END_DRAW_CURRENT_GHOST_PIXEL_HANDLER
        
        DRAW_GHOST_EYES_PIXEL_HANDLER: ; Original OLHOS
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        JMP END_DRAW_CURRENT_GHOST_PIXEL_HANDLER
        
        DRAW_SCARED_GHOST_BODY_PIXEL_HANDLER: ;MAGENTA GHOST (Original comment: FANTASMA MAGENTA)
                                mov cx, Current_Column  ; column
                                mov dx, Current_Row     ; row
                                mov al, 01              ; WHITE (Original comment)
                                mov ah, 0Ch             ; put pixel
                                int 10h
                                JMP END_DRAW_CURRENT_GHOST_PIXEL_HANDLER
                                
        ; END_GHOST_FEAR_MODE_ANIMATION_PIXEL_COMMENT: (Original: fim_medo_fant)
                        ; INC Current_Column
                        ; ADD BX,2
                        ; INC scared_ghost_animation_controller ; (Original: controlador_medo)
                        ; DEC scared_ghost_pixel_counter      ; (Original: cont_medo)
                        ; CMP scared_ghost_pixel_counter,0
                        ; JNZ SCARED_GHOST_ANIMATION_LOOP          ; (Original: JNZ LOOP_MEDO)
        
        END_DRAW_CURRENT_GHOST_PIXEL_HANDLER: ; Original fim2_FANTASMA
        INC Current_Column

        ADD BX,2

        INC ghost_animation_counter
        DEC generic_counter
        CMP generic_counter,0
        JNZ GHOST_DRAW_PIXEL_LOOP_TARGET_LOLA3 ; Original JNZ LOLA3

RET
DRAW_GHOST_IMAGE_FRAMES_PROCEDURE ENDP
;---------------------- END DRAW_GHOST_IMAGE_FRAMES_PROCEDURE -----------------------;




;----------------------- START DRAW_PELLETS_PROCEDURE ----------------------------------------------------------
DRAW_PELLETS_PROCEDURE PROC

MOV map_draw_controller,0
MOV current_pixel_row, 1
MOV current_pixel_column, 1

XOR SI,SI
XOR BX,BX
MOV pixel_counter, 418 ;quantity of items in the matrix

TIMES_PELLET_LOOP:

MOV AX, Chosen_Level_Pellet[BX]

CMP map_draw_controller,19 ;number of columns
JNE DONT_NEWLINE_PELLET_DRAW
;new line
MOV map_draw_controller,0
MOV current_pixel_column,1
INC current_pixel_row

DONT_NEWLINE_PELLET_DRAW:

CMP AX,2 ; Large pellet type
JE DRAW_LARGE_PELLET_HANDLER

CMP AX,1 ; Normal pellet type
JE DRAW_NORMAL_PELLET_HANDLER

JMP END_PELLET_DRAW_TYPE_CHECK


DRAW_NORMAL_PELLET_HANDLER:
                CALL DRAW_NORMAL_PELLET_SPRITE_PROCEDURE
                JMP END_PELLET_DRAW_TYPE_CHECK
                
DRAW_LARGE_PELLET_HANDLER: 
                CALL DRAW_LARGE_PELLET_SPRITE_PROCEDURE
    
END_PELLET_DRAW_TYPE_CHECK:
INC current_pixel_column

ADD BX,2

INC map_draw_controller
DEC pixel_counter
CMP pixel_counter,0
JNZ TIMES_PELLET_LOOP

RET
DRAW_PELLETS_PROCEDURE ENDP
;----------------------- END DRAW_PELLETS_PROCEDURE ----------------------------------------------------------

;------------------------------- START DRAW_LARGE_PELLET_SPRITE_PROCEDURE --------------------------------------------
DRAW_LARGE_PELLET_SPRITE_PROCEDURE PROC ; Original: BOLINHA_GRANDE_PASTILHA
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH AX
        
        MOV pellet_sprite_draw_controller,0 ; Original: controlador_bolinha
        
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels ; Original: separador_quadrado
        ADD AX,7 ; Offset to center pellet sprite in tile
        MOV Current_Column, AX ; Original: coluna
        
        MOV AX,current_pixel_row
        MUL tile_spacing_pixels ; Original: separador_quadrado
        ADD AX,7 ; Offset to center pellet sprite in tile
        MOV Current_Row, AX ; Original: linha
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 63 ;quantity of items in the sprite data (9x7 sprite) ; Original: cont, Bolinha_grande

        TIMES_PELLET_SPRITE_PIXEL_LOOP: ; Original: VEZES_BOLINHA

        MOV AX, Big_ball[BX] ; Original: Bolinha_grande

        CMP pellet_sprite_draw_controller,9 ;number of columns in sprite
        JNE DONT_NEWLINE_PELLET_SPRITE_DRAW_LOGIC
        ;new line in sprite (original comment: pula linha)
        MOV pellet_sprite_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        ADD AX,7
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
        DONT_NEWLINE_PELLET_SPRITE_DRAW_LOGIC: ; Original: nao_pula_BOLINHA

        CMP AX,1 ; Pixel value for visible part of pellet
        JE DRAW_WHITE_PELLET_PIXEL_HANDLER
                ;BLACK (Transparent part of pellet sprite) (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_CURRENT_PELLET_PIXEL_HANDLER

        DRAW_WHITE_PELLET_PIXEL_HANDLER: ;WHITE (Original comment: BRANCO_BOLINHA: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_CURRENT_PELLET_PIXEL_HANDLER: ; Original: fim_BOLINHA
        INC Current_Column

        ADD BX,2

        INC pellet_sprite_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ TIMES_PELLET_SPRITE_PIXEL_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_LARGE_PELLET_SPRITE_PROCEDURE ENDP
;------------------------------- END DRAW_LARGE_PELLET_SPRITE_PROCEDURE --------------------------------------------

;------------------------------- START DRAW_NORMAL_PELLET_SPRITE_PROCEDURE --------------------------------------------
DRAW_NORMAL_PELLET_SPRITE_PROCEDURE PROC ; Original: BOLINHA_NORMAL_PASTILHA
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH AX
        
        MOV pellet_sprite_draw_controller,0 ; Original: controlador_bolinha
        
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels ; Original: separador_quadrado
        ADD AX,9 ; Offset to center pellet sprite in tile
        MOV Current_Column, AX ; Original: coluna
        
        MOV AX,current_pixel_row
        MUL tile_spacing_pixels ; Original: separador_quadrado
        ADD AX,9 ; Offset to center pellet sprite in tile
        MOV Current_Row, AX ; Original: linha
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 24 ;quantity of items in the sprite data (6x4 sprite) ; Original: cont, Bolinha_normal

        TIMES_NORMAL_PELLET_SPRITE_LOOP: ; Original: VEZES_BOLINHA_NORMAL

        MOV AX, normal_ball[BX] ; Original: Bolinha_normal

        CMP pellet_sprite_draw_controller,6 ;number of columns in sprite
        JNE DONT_NEWLINE_NORMAL_PELLET_SPRITE_DRAW_LOGIC
        ;new line in sprite (original comment: pula linha)
        MOV pellet_sprite_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        ADD AX,9
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
        DONT_NEWLINE_NORMAL_PELLET_SPRITE_DRAW_LOGIC: ; Original: nao_pula_BOLINHA_NORMAL

        CMP AX,1 ; Pixel value for visible part of pellet
        JE DRAW_WHITE_NORMAL_PELLET_PIXEL_HANDLER
                ;BLACK (Transparent part of pellet sprite) (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_CURRENT_NORMAL_PELLET_PIXEL_HANDLER

        DRAW_WHITE_NORMAL_PELLET_PIXEL_HANDLER: ;WHITE (Original comment: BRANCO_BOLINHA_NORMAL: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_CURRENT_NORMAL_PELLET_PIXEL_HANDLER: ; Original: fim_BOLINHA_NORMAL
        INC Current_Column

        ADD BX,2

        INC pellet_sprite_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ TIMES_NORMAL_PELLET_SPRITE_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_NORMAL_PELLET_SPRITE_PROCEDURE ENDP
;------------------------------- END DRAW_NORMAL_PELLET_SPRITE_PROCEDURE -------------------------------------------- 

; ;------------------------ START FIND_PACMAN_BX_INDEX_PROCEDURE ------------------------------- 
; FIND_PACMAN_BX_INDEX_PROCEDURE PROC 

    ; XOR BX,BX
    ; MOV AX,19 ; Map width
    ; SUB pacman_current_row,1 ; Original: linha_pacman_atual
    
    ; MUL pacman_current_row ; AX = 19 * (pacman_current_row - 1)
    ; MOV BX,AX
    ; ADD BX,pacman_current_column ; Original: coluna_pacman_atual
    
    ; MOV AX,2 ; Bytes per word
    ; MUL BX   ; AX = TileIndex * 2
    
    ; SUB AX,2 ; Adjust index if 1-based or for other reasons
    ; MOV BX,AX
    
    ; XOR AX,AX

; RET
; FIND_PACMAN_BX_INDEX_PROCEDURE ENDP
; ;------------------------ END FIND_PACMAN_BX_INDEX_PROCEDURE ------------------------------- 



;------------------------ START DELAY_PROCEDURE -------------------------------
DELAY_PROCEDURE PROC

    PUSH CX
    
    MOV CX,1000
    MOV delay_counter, 100
    
    Delay_Repeater_Loop:
        
        PUSH CX
        MOV CX, delay_counter
        
        Delay_Repeater2_Loop:
        NOP
        LOOP Delay_Repeater2_Loop
        
        POP CX
    
    LOOP Delay_Repeater_Loop
    
    POP CX

RET
DELAY_PROCEDURE ENDP
;------------------------ END DELAY_PROCEDURE ------------------------------- 

;------------------------ START ANIMATION_DELAY_PROCEDURE -------------------------------
ANIMATION_DELAY_PROCEDURE PROC

    PUSH CX
    
    MOV CX,1000
    MOV animation_delay_counter, 100
    
    Animation_Delay_Repeater_Loop:
        
        PUSH CX
        MOV CX, animation_delay_counter
        
        Animation_Delay_Repeater2_Loop:
        NOP
        LOOP Animation_Delay_Repeater2_Loop
        
        POP CX
    
    LOOP Animation_Delay_Repeater_Loop
    
    POP CX

RET
ANIMATION_DELAY_PROCEDURE ENDP
;------------------------ END DELAY_PROCEDURE ------------------------------- (Original comment: FIM DELAY)

    
;------------------------ START RESET_PACMAN_ROW_PROCEDURE ------------------------------- 
RESET_PACMAN_ROW_PROCEDURE PROC

      PUSH AX
      MOV AX,current_pixel_row
      MUL tile_spacing_pixels
      MOV Current_Row, AX
      POP AX

RET
RESET_PACMAN_ROW_PROCEDURE ENDP
;------------------------ END RESET_PACMAN_ROW_PROCEDURE -------------------------------    

;------------------------ START RESET_PACMAN_COLUMN_PROCEDURE -------------------------------    
RESET_PACMAN_COLUMN_PROCEDURE PROC

      PUSH AX
      MOV AX,pacman_current_column
      MUL tile_spacing_pixels
      MOV Current_Column, AX
      POP AX

RET
RESET_PACMAN_COLUMN_PROCEDURE ENDP
;------------------------ END RESET_PACMAN_COLUMN_PROCEDURE -------------------------------  

;------------------------ START RESET_PACMAN_COORDINATES_PROCEDURE -------------------------------   
RESET_PACMAN_COORDINATES_PROCEDURE PROC

      MOV pacman_animation_counter,0
      
      PUSH AX
      MOV AX,pacman_current_row
      MUL tile_spacing_pixels
      MOV Current_Row, AX

      MOV AX,pacman_current_column
      MUL tile_spacing_pixels
      MOV Current_Column, AX
      POP AX

RET
RESET_PACMAN_COORDINATES_PROCEDURE ENDP
;------------------------ END RESET_PACMAN_COORDINATES_PROCEDURE -------------------------------  


;------------------------ START UP_ARROW_FUNCTION_PROCEDURE -------------------------------   (Original typo: INICO SETA CIMA)
FUNCTION_UP_ARROW_PROCEDURE PROC

    MOV BX, pacman_position_index

    CMP Chosen_Level_Map[BX-38],1 ; Check for wall one row up
    JE TARGET_LOLA4_UP_WALL_CHECK
    
    ;IF NOTHING IS PRESSED AND IT'S NOT A WALL (Original comment: SE NÃO APERTAR NADA E NÃO FOR PAREDE)
    MOV Chosen_Level_Map[BX],2 ; Mark old Pacman position for erasing
    SUB BX,38                  ; Move Pacman index up one row
    
    CMP Chosen_Level_Map[BX], 6 ; Check for green ghost
    JE GHOST_GREEN_FOUND1_UP
    
    CMP Chosen_Level_Map[BX], 7 ; Check for cyan ghost
    JE GHOST_CYAN_FOUND1_UP
    
    CMP Chosen_Level_Map[BX], 8 ; Check for red ghost
    JE GHOST_RED_FOUND1_UP
    
    CMP Chosen_Level_Map[BX], 9 ; Check for magenta ghost
    JE GHOST_MAGENTA_FOUND1_UP
    
    ;GHOST NOT FOUND (Original comment: FANTASMA NÃO ENCONTRADO)
    MOV Chosen_Level_Map[BX],5 ; Place Pacman (5) at new position
    CALL CHECK_PELLET_AND_SCORE_PROCEDURE
    JMP GHOST_NOT_FOUND1_UP
    
TARGET_LOLA4_UP_WALL_CHECK: JMP HIT_WALL_UP_HANDLER ; Original: PAREDE_MAPA_CIMA
    
    ;IF THE GHOST IS IN THIS POSITION (Original comment: SE O FANTASMA ESTIVER NESSA POSICAO)
GHOST_GREEN_FOUND1_UP:    MOV DX, 6 ; Ghost ID for green
                          JMP END_GHOST_ENCOUNTERED_LOGIC_UP_HANDLER
                          
GHOST_CYAN_FOUND1_UP:     MOV DX, 7 ; Ghost ID for cyan
                          JMP END_GHOST_ENCOUNTERED_LOGIC_UP_HANDLER
                          
GHOST_RED_FOUND1_UP:      MOV DX, 8 ; Ghost ID for red
                          JMP END_GHOST_ENCOUNTERED_LOGIC_UP_HANDLER
    
GHOST_MAGENTA_FOUND1_UP:  MOV DX, 9 ; Ghost ID for magenta
                          JMP END_GHOST_ENCOUNTERED_LOGIC_UP_HANDLER
    
END_GHOST_ENCOUNTERED_LOGIC_UP_HANDLER: ; Original: FIM_FANTASMA_PEGO
    CMP power_pellet_active_state,800 ; Check if power pellet (scared mode) is active (800 byte offset for scared sprite)
    JE SUPER_PELLET_ACTIVATED_UP_HANDLER
    
    ;IF THE PELLET IS DEACTIVATED (Original comment: SE A PASTILHA ESTIVER DESATIVADA)
    CALL LOSE_LIFE_PROCEDURE
    JMP GHOST_NOT_FOUND1_UP ; Still need to update map even if life lost
    
SUPER_PELLET_ACTIVATED_UP_HANDLER: ; Original: PASTILHA_SUPER_ATIVADA
    CMP DX,6
    JE GHOST_GREEN_KILLED_HANDLER_UP
    
    CMP DX,7
    JE GHOST_CYAN_KILLED_HANDLER_UP
    
    CMP DX,8
    JE GHOST_RED_KILLED_HANDLER_UP
    
    CMP DX,9
    JE GHOST_MAGENTA_KILLED_HANDLER_UP

GHOST_GREEN_KILLED_HANDLER_UP:  ADD total_score, 50
                                MOV BX, green_ghost_position
                                MOV Chosen_Level_Map[BX], 0 ; Clear ghost from current position
                                
                                MOV BX, 40 ; Respawn map index for green ghost
                                MOV Chosen_Level_Map[BX], 6 ; Place green ghost at respawn
                                JMP GHOST_NOT_FOUND1_UP
                                
GHOST_CYAN_KILLED_HANDLER_UP:   ADD total_score, 50
                                MOV BX, cyan_ghost_position
                                MOV Chosen_Level_Map[BX], 0
                                
                                MOV BX, 42 ; Respawn map index for cyan ghost
                                MOV Chosen_Level_Map[BX], 7 ; Place cyan ghost at respawn
                                JMP GHOST_NOT_FOUND1_UP
                                
GHOST_RED_KILLED_HANDLER_UP:    ADD total_score, 50
                                MOV BX, red_ghost_position
                                MOV Chosen_Level_Map[BX], 0
                                
                                MOV BX, 44 ; Respawn map index for red ghost
                                MOV Chosen_Level_Map[BX], 8 ; Place red ghost at respawn
                                JMP GHOST_NOT_FOUND1_UP
                                
                                
GHOST_MAGENTA_KILLED_HANDLER_UP: ADD total_score, 50
                                MOV BX, magenta_ghost_position
                                MOV Chosen_Level_Map[BX], 0
                                
                                MOV BX, 46 ; Respawn map index for magenta ghost
                                MOV Chosen_Level_Map[BX], 9 ; Place magenta ghost at respawn
                                JMP GHOST_NOT_FOUND1_UP
                                
                                
                                
GHOST_NOT_FOUND1_UP:

    RET
    
HIT_WALL_UP_HANDLER: ; Original: PAREDE_MAPA_CIMA
    RET
    
FUNCTION_UP_ARROW_PROCEDURE ENDP
;------------------------ END UP_ARROW_FUNCTION_PROCEDURE ------------------------------- 

;------------------------ START LEFT_ARROW_FUNCTION_PROCEDURE -------------------------------   (Original typo: INICO SETA ESQUERDA)
FUNCTION_LEFT_ARROW_PROCEDURE PROC

    MOV BX, pacman_position_index

    CMP Chosen_Level_Map[BX-2],1 ; Check for wall to the left
    JE TARGET_LOLA5_LEFT_WALL_CHECK
    
    ;IF NOTHING IS PRESSED AND IT'S NOT A WALL (Original comment: SE NÃO APERTAR NADA E NÃO FOR PAREDE)
    MOV Chosen_Level_Map[BX],2 ; Mark old Pacman position for erasing
    SUB BX,2                   ; Move Pacman index left one tile
    
    CMP Chosen_Level_Map[BX-2],3 ; Check tile to the left of the new position for teleport trigger
    JNE CONTINUE_PATH_LEFT
    ;TELEPORT
    MOV Chosen_Level_Map[BX],2   ; Erase Pacman from teleport entry point if it was also new pos
    MOV BX,414                   ; Teleport destination index (right side of map)
    MOV Chosen_Level_Map[BX],5   ; Place Pacman at destination
    
    RET
CONTINUE_PATH_LEFT:
    
    CMP Chosen_Level_Map[BX], 6 ; Check for green ghost at new position
    JE GHOST_GREEN_FOUND2_LEFT
    
    CMP Chosen_Level_Map[BX], 7 ; Check for cyan ghost
    JE GHOST_CYAN_FOUND2_LEFT
    
    CMP Chosen_Level_Map[BX], 8 ; Check for red ghost
    JE GHOST_RED_FOUND2_LEFT
    
    CMP Chosen_Level_Map[BX], 9 ; Check for magenta ghost
    JE GHOST_MAGENTA_FOUND2_LEFT
    
    ;GHOST NOT FOUND (Original comment: FANTASMA NÃO ENCONTRADO)
    MOV Chosen_Level_Map[BX],5 ; Place Pacman (5) at new position
    CALL CHECK_PELLET_AND_SCORE_PROCEDURE
    JMP GHOST_NOT_FOUND2_LEFT
    
TARGET_LOLA5_LEFT_WALL_CHECK: JMP HIT_WALL_LEFT_HANDLER ; Original: PAREDE_MAPA_ESQUERDA
    
    ;IF THE GHOST IS IN THIS POSITION (Original comment: SE O FANTASMA ESTIVER NESSA POSICAO)
GHOST_GREEN_FOUND2_LEFT:    MOV DX, 6 ; Ghost ID for green
                            JMP END_GHOST_ENCOUNTERED_LOGIC_LEFT_HANDLER
                            
GHOST_CYAN_FOUND2_LEFT:     MOV DX, 7 ; Ghost ID for cyan
                            JMP END_GHOST_ENCOUNTERED_LOGIC_LEFT_HANDLER
                            
GHOST_RED_FOUND2_LEFT:      MOV DX, 8 ; Ghost ID for red
                            JMP END_GHOST_ENCOUNTERED_LOGIC_LEFT_HANDLER
    
GHOST_MAGENTA_FOUND2_LEFT:  MOV DX, 9 ; Ghost ID for magenta
                            JMP END_GHOST_ENCOUNTERED_LOGIC_LEFT_HANDLER
    
END_GHOST_ENCOUNTERED_LOGIC_LEFT_HANDLER: ; Original: FIM_FANTASMA_PEGO2
    CMP power_pellet_active_state,800 ; Check if power pellet (scared mode) is active
    JE SUPER_PELLET_ACTIVATED_LEFT_HANDLER
    
    ;IF THE PELLET IS DEACTIVATED (Original comment: SE A PASTILHA ESTIVER DESATIVADA)
    CALL LOSE_LIFE_PROCEDURE
    JMP GHOST_NOT_FOUND2_LEFT
    
SUPER_PELLET_ACTIVATED_LEFT_HANDLER:    ; Original: PASTILHA_SUPER_ATIVADA2
    CMP DX,6
    JE GHOST_GREEN_KILLED_HANDLER_LEFT
    
    CMP DX,7
    JE GHOST_CYAN_KILLED_HANDLER_LEFT
    
    CMP DX,8
    JE GHOST_RED_KILLED_HANDLER_LEFT
    
    CMP DX,9
    JE GHOST_MAGENTA_KILLED_HANDLER_LEFT

GHOST_GREEN_KILLED_HANDLER_LEFT:    MOV BX, green_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 40 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 6 ; Place green ghost at respawn
                                    JMP GHOST_NOT_FOUND2_LEFT
                                    
GHOST_CYAN_KILLED_HANDLER_LEFT:     MOV BX, cyan_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 42 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 7 ; Place cyan ghost at respawn
                                    JMP GHOST_NOT_FOUND2_LEFT
                                    
GHOST_RED_KILLED_HANDLER_LEFT:      MOV BX, red_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 44 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 8 ; Place red ghost at respawn
                                    JMP GHOST_NOT_FOUND2_LEFT
                                    
                                    
GHOST_MAGENTA_KILLED_HANDLER_LEFT:  MOV BX, magenta_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 46 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 9 ; Place magenta ghost at respawn
                                    JMP GHOST_NOT_FOUND2_LEFT
                                    
                                    
                                    
GHOST_NOT_FOUND2_LEFT:

    RET
    
HIT_WALL_LEFT_HANDLER: ; Original: PAREDE_MAPA_ESQUERDA
    RET
    
FUNCTION_LEFT_ARROW_PROCEDURE ENDP
;------------------------ END LEFT_ARROW_FUNCTION_PROCEDURE ------------------------------- 

;------------------------ START RIGHT_ARROW_FUNCTION_PROCEDURE -------------------------------    (Original typo: INICO SETA DIREITA)
FUNCTION_RIGHT_ARROW_PROCEDURE PROC

    MOV BX, pacman_position_index

    CMP Chosen_Level_Map[BX+2],1 ; Check for wall to the right
    JE TARGET_LOLA6_RIGHT_WALL_CHECK
    
    ;IF NOTHING IS PRESSED AND IT'S NOT A WALL (Original comment: SE NÃO APERTAR NADA E NÃO FOR PAREDE)
    MOV Chosen_Level_Map[BX],2 ; Mark old Pacman position for erasing
    ADD BX,2                   ; Move Pacman index right one tile
    
    CMP Chosen_Level_Map[BX+2],3 ; Check tile to the right of the new position for teleport trigger
    JNE CONTINUE_PATH_RIGHT
    ;TELEPORT
    MOV Chosen_Level_Map[BX],2   ; Erase Pacman from teleport entry point if it was also new pos
    MOV BX,382                   ; Teleport destination index (left side of map)
    MOV Chosen_Level_Map[BX],5   ; Place Pacman at destination
    
    RET
CONTINUE_PATH_RIGHT:
    
    CMP Chosen_Level_Map[BX], 6 ; Check for green ghost at new position
    JE GHOST_GREEN_FOUND3_RIGHT
    
    CMP Chosen_Level_Map[BX], 7 ; Check for cyan ghost
    JE GHOST_CYAN_FOUND3_RIGHT
    
    CMP Chosen_Level_Map[BX], 8 ; Check for red ghost
    JE GHOST_RED_FOUND3_RIGHT
    
    CMP Chosen_Level_Map[BX], 9 ; Check for magenta ghost
    JE GHOST_MAGENTA_FOUND3_RIGHT
    
    ;GHOST NOT FOUND (Original comment: FANTASMA NÃO ENCONTRADO)
    MOV Chosen_Level_Map[BX],5 ; Place Pacman (5) at new position
    CALL CHECK_PELLET_AND_SCORE_PROCEDURE
    JMP GHOST_NOT_FOUND3_RIGHT
    
TARGET_LOLA6_RIGHT_WALL_CHECK: JMP HIT_WALL_RIGHT_HANDLER ; Original: PAREDE_MAPA_DIREITA
    
    ;IF THE GHOST IS IN THIS POSITION (Original comment: SE O FANTASMA ESTIVER NESSA POSICAO)
GHOST_GREEN_FOUND3_RIGHT:   MOV DX, 6 ; Ghost ID for green
                            JMP END_GHOST_ENCOUNTERED_LOGIC_RIGHT_HANDLER
                            
GHOST_CYAN_FOUND3_RIGHT:    MOV DX, 7 ; Ghost ID for cyan
                            JMP END_GHOST_ENCOUNTERED_LOGIC_RIGHT_HANDLER
                            
GHOST_RED_FOUND3_RIGHT:     MOV DX, 8 ; Ghost ID for red
                            JMP END_GHOST_ENCOUNTERED_LOGIC_RIGHT_HANDLER
    
GHOST_MAGENTA_FOUND3_RIGHT: MOV DX, 9 ; Ghost ID for magenta
                            JMP END_GHOST_ENCOUNTERED_LOGIC_RIGHT_HANDLER
    
END_GHOST_ENCOUNTERED_LOGIC_RIGHT_HANDLER: ; Original: FIM_FANTASMA_PEGO3
    CMP power_pellet_active_state,800 ; Check if power pellet (scared mode) is active
    JE SUPER_PELLET_ACTIVATED_RIGHT_HANDLER
    
    ;IF THE PELLET IS DEACTIVATED (Original comment: SE A PASTILHA ESTIVER DESATIVADA)
    CALL LOSE_LIFE_PROCEDURE
    JMP GHOST_NOT_FOUND3_RIGHT
    
SUPER_PELLET_ACTIVATED_RIGHT_HANDLER:   ; Original: PASTILHA_SUPER_ATIVADA3
    CMP DX,6
    JE GHOST_GREEN_KILLED_HANDLER_RIGHT
    
    CMP DX,7
    JE GHOST_CYAN_KILLED_HANDLER_RIGHT
    
    CMP DX,8
    JE GHOST_RED_KILLED_HANDLER_RIGHT
    
    CMP DX,9
    JE GHOST_MAGENTA_KILLED_HANDLER_RIGHT
    
GHOST_GREEN_KILLED_HANDLER_RIGHT:   MOV BX, green_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 40 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 6 ; Place green ghost at respawn
                                    JMP GHOST_NOT_FOUND3_RIGHT
                                    
GHOST_CYAN_KILLED_HANDLER_RIGHT:    MOV BX, cyan_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 42 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 7 ; Place cyan ghost at respawn
                                    JMP GHOST_NOT_FOUND3_RIGHT
                                    
GHOST_RED_KILLED_HANDLER_RIGHT:     MOV BX, red_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 44 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 8 ; Place red ghost at respawn
                                    JMP GHOST_NOT_FOUND3_RIGHT
                                    
                                    
GHOST_MAGENTA_KILLED_HANDLER_RIGHT: MOV BX, magenta_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 46 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 9 ; Place magenta ghost at respawn
                                    JMP GHOST_NOT_FOUND3_RIGHT
                                    
                                    
                                    
GHOST_NOT_FOUND3_RIGHT:

    RET
    
HIT_WALL_RIGHT_HANDLER: ; Original: PAREDE_MAPA_DIREITA
    RET
    
FUNCTION_RIGHT_ARROW_PROCEDURE ENDP
;------------------------ END RIGHT_ARROW_FUNCTION_PROCEDURE ------------------------------- 

;------------------------ START DOWN_ARROW_FUNCTION_PROCEDURE -------------------------------    (Original typo: INICO SETA BAIXO)
FUNCTION_DOWN_ARROW_PROCEDURE PROC

    MOV BX, pacman_position_index

    CMP Chosen_Level_Map[BX+38],1 ; Check for wall one row down
    JE TARGET_LOLA7_DOWN_WALL_CHECK
    
    ;IF NOTHING IS PRESSED AND IT'S NOT A WALL (Original comment: SE NÃO APERTAR NADA E NÃO FOR PAREDE)
    MOV Chosen_Level_Map[BX],2 ; Mark old Pacman position for erasing
    ADD BX,38                  ; Move Pacman index down one row
    
    CMP Chosen_Level_Map[BX], 6 ; Check for green ghost
    JE GHOST_GREEN_FOUND4_DOWN
    
    CMP Chosen_Level_Map[BX], 7 ; Check for cyan ghost
    JE GHOST_CYAN_FOUND4_DOWN
    
    CMP Chosen_Level_Map[BX], 8 ; Check for red ghost
    JE GHOST_RED_FOUND4_DOWN
    ; END AXEL
    ; START JOSHUA
    CMP Chosen_Level_Map[BX], 9 ; Check for magenta ghost
    JE GHOST_MAGENTA_FOUND4_DOWN
    
    ;GHOST NOT FOUND (Original comment: FANTASMA NÃO ENCONTRADO)
    MOV Chosen_Level_Map[BX],5 ; Place Pacman (5) at new position
    CALL CHECK_PELLET_AND_SCORE_PROCEDURE
    JMP GHOST_NOT_FOUND4_DOWN
    
TARGET_LOLA7_DOWN_WALL_CHECK: JMP HIT_WALL_DOWN_HANDLER ; Original: PAREDE_MAPA_BAIXO
    
    ;IF THE GHOST IS IN THIS POSITION (Original comment: SE O FANTASMA ESTIVER NESSA POSICAO)
GHOST_GREEN_FOUND4_DOWN:    MOV DX, 6 ; Ghost ID for green
                            JMP END_GHOST_ENCOUNTERED_LOGIC_DOWN_HANDLER
                            
GHOST_CYAN_FOUND4_DOWN:     MOV DX, 7 ; Ghost ID for cyan
                            JMP END_GHOST_ENCOUNTERED_LOGIC_DOWN_HANDLER
                            
GHOST_RED_FOUND4_DOWN:      MOV DX, 8 ; Ghost ID for red
                            JMP END_GHOST_ENCOUNTERED_LOGIC_DOWN_HANDLER
    
GHOST_MAGENTA_FOUND4_DOWN:  MOV DX, 9 ; Ghost ID for magenta
                            JMP END_GHOST_ENCOUNTERED_LOGIC_DOWN_HANDLER
    
END_GHOST_ENCOUNTERED_LOGIC_DOWN_HANDLER: ; Original: FIM_FANTASMA_PEGO4
    CMP power_pellet_active_state,800 ; Check if power pellet (scared mode) is active
    JE SUPER_PELLET_ACTIVATED_DOWN_HANDLER
    
    ;IF THE PELLET IS DEACTIVATED (Original comment: SE A PASTILHA ESTIVER DESATIVADA)
    CALL LOSE_LIFE_PROCEDURE
    JMP GHOST_NOT_FOUND4_DOWN
    
SUPER_PELLET_ACTIVATED_DOWN_HANDLER:    ; Original: PASTILHA_SUPER_ATIVADA4
    CMP DX,6
    JE GHOST_GREEN_KILLED_HANDLER_DOWN
    
    CMP DX,7
    JE GHOST_CYAN_KILLED_HANDLER_DOWN
    
    CMP DX,8
    JE GHOST_RED_KILLED_HANDLER_DOWN
    
    CMP DX,9
    JE GHOST_MAGENTA_KILLED_HANDLER_DOWN
    
GHOST_GREEN_KILLED_HANDLER_DOWN:    MOV BX, green_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 40 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 6 ; Place green ghost at respawn
                                    JMP GHOST_NOT_FOUND4_DOWN
                                    
GHOST_CYAN_KILLED_HANDLER_DOWN:     MOV BX, cyan_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 42 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 7 ; Place cyan ghost at respawn
                                    JMP GHOST_NOT_FOUND4_DOWN
                                    
GHOST_RED_KILLED_HANDLER_DOWN:      MOV BX, red_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 44 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 8 ; Place red ghost at respawn
                                    JMP GHOST_NOT_FOUND4_DOWN
                                    
                                    
GHOST_MAGENTA_KILLED_HANDLER_DOWN:  MOV BX, magenta_ghost_position
                                    MOV Chosen_Level_Map[BX], 0
                                    
                                    MOV BX, 46 ; Respawn map index
                                    MOV Chosen_Level_Map[BX], 9 ; Place magenta ghost at respawn
                                    JMP GHOST_NOT_FOUND4_DOWN
                                    
                                    
                                    
GHOST_NOT_FOUND4_DOWN:

    RET
    
HIT_WALL_DOWN_HANDLER: ; Original: PAREDE_MAPA_BAIXO
    RET
    
FUNCTION_DOWN_ARROW_PROCEDURE ENDP
;------------------------ END DOWN_ARROW_FUNCTION_PROCEDURE -------------------------------    

    
;----------------------- START CHECK_WALL_COLLISION_PROCEDURE -----------------------------------
CHECK_WALL_COLLISION_PROCEDURE PROC

    MOV wall_flag,0
    
    CMP AH,48H ; Up Arrow key
    JE CHECK_WALL_UP_HANDLER
    
    CMP AH,4BH ; Left Arrow key
    JE CHECK_WALL_LEFT_HANDLER
    
    CMP AH,4DH ; Right Arrow key
    JE CHECK_WALL_RIGHT_HANDLER
    
    CMP AH,50H ; Down Arrow key
    JE CHECK_WALL_DOWN_HANDLER

    
CHECK_WALL_UP_HANDLER:      CMP Chosen_Level_Map[BX-38],1
                            JNE END_CHECK_WALL_COLLISION_LOGIC
                            MOV wall_flag,1
                            JMP END_CHECK_WALL_COLLISION_LOGIC

CHECK_WALL_LEFT_HANDLER:    CMP Chosen_Level_Map[BX-2],1
                            JNE END_CHECK_WALL_COLLISION_LOGIC
                            MOV wall_flag,1
                            JMP END_CHECK_WALL_COLLISION_LOGIC
        
CHECK_WALL_RIGHT_HANDLER:   CMP Chosen_Level_Map[BX+2],1
                            JNE END_CHECK_WALL_COLLISION_LOGIC
                            MOV wall_flag,1
                            JMP END_CHECK_WALL_COLLISION_LOGIC
    
CHECK_WALL_DOWN_HANDLER:    CMP Chosen_Level_Map[BX+38],1
                            JNE END_CHECK_WALL_COLLISION_LOGIC
                            MOV wall_flag,1

END_CHECK_WALL_COLLISION_LOGIC:

RET
CHECK_WALL_COLLISION_PROCEDURE ENDP
;----------------------- END CHECK_WALL_COLLISION_PROCEDURE -----------------------------------


;----- START PRINT_OPENING_SEQUENCE_PROCEDURE ---------------------------------------
PRINT_OPENING_SEQUENCE_PROCEDURE PROC

XOR SI,SI
XOR BX,BX
MOV opening_pixel_column,0
MOV opening_pixel_row,0
MOV opening_sequence_controller,0 ; Original: controlador_abertura

MOV opening_pixel_counter, 4800 ;quantity of items in the sprite data (Original comment: quantidade de itens da matriz)

OPENING_DRAW_LOOP: ; Original: VEZES_abertura

MOV AX, OPENING[BX] ; Original: ABERTURA

CMP opening_sequence_controller,80 ;number of columns in opening sprite
JNE DONT_NEWLINE_OPENING_DRAW_LOGIC
;new line for opening sprite (Original comment: pula linha_abertura)
MOV opening_sequence_controller,0
MOV opening_pixel_column,0
INC opening_pixel_row

DONT_NEWLINE_OPENING_DRAW_LOGIC: ; Original: nao_pula_abertura
PUSH BX

CMP AX,0
JE BLACK_HANDLER_OPENING
    
CMP AX,3
JE CYAN_HANDLER_OPENING

CMP AX,4
JE RED_HANDLER_OPENING

CMP AX,5
JE MAGENTA_HANDLER_OPENING

CMP AX,6
JE BROWN_HANDLER_OPENING

CMP AX,14
JE YELLOW_HANDLER_OPENING

CMP AX,15
JE WHITE_HANDLER_OPENING

JMP END_OPENING_PIXEL_DRAW_LOGIC
BLACK_HANDLER_OPENING: ; Original: BLACK
MOV current_color,0
CALL DRAW_OPENING_SQUARE_PROCEDURE ; Original: QUADRADO_ABERTURA
JMP END_OPENING_PIXEL_DRAW_LOGIC

CYAN_HANDLER_OPENING: ; Original: CYAN
MOV current_color,3
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC

RED_HANDLER_OPENING: ; Original: RED
MOV current_color,4
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC

LOLA_OPENING_LOOP_TARGET: ; Original: LOLA_ABERTURA
JMP OPENING_DRAW_LOOP

MAGENTA_HANDLER_OPENING: ; Original: MAGENTA
MOV current_color,5
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC

BROWN_HANDLER_OPENING: ; Original: BROWN
MOV current_color,6
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC

YELLOW_HANDLER_OPENING: ; Original: YELLOW
MOV current_color,14
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC

WHITE_HANDLER_OPENING: ; Original: WHITE
MOV current_color,15
CALL DRAW_OPENING_SQUARE_PROCEDURE
JMP END_OPENING_PIXEL_DRAW_LOGIC



    
END_OPENING_PIXEL_DRAW_LOGIC: ; Original: fim_abertura

POP BX

INC opening_pixel_column

ADD BX,2

INC opening_sequence_controller
DEC opening_pixel_counter
CMP opening_pixel_counter,0
JNZ LOLA_OPENING_LOOP_TARGET ; Original: JNZ LOLA_ABERTURA

RET

; MOV     CX, 002Eh
; MOV     DX, 8480H
; MOV     AH, 86H ;;1s delay (Original comment: ;;delay de 1s)
; INT     15H
PRINT_OPENING_SEQUENCE_PROCEDURE ENDP

DRAW_OPENING_SQUARE_PROCEDURE PROC ; Original: QUADRADO_ABERTURA
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX

        XOR SI,SI
        XOR BX,BX
        MOV opening_column_counter,0 ; Original: cont_coluna_abertura
        MOV opening_counter, 100     ; Original: cont_abertura (likely pixel count for a 10x10 square)

        MOV AX,opening_pixel_column
        MUL opening_tile_spacing     ; Original: separador_quadrado_abertura
        MOV opening_start_column, AX ; Original: coluna_abertura

        MOV AX,opening_pixel_row
        MUL opening_tile_spacing     ; Original: separador_quadrado_abertura
        MOV opening_start_row, AX    ; Original: linha_abertura

OPENING_SQUARE_DRAW_LOOP: ; Original: VEZES_BRANCO_ABERTURA
            CMP opening_column_counter,10
            JNE DONT_NEWLINE_OPENING_SQUARE_DRAW
            ;new line for opening square (Original comment: pula linha_abertura)

            MOV opening_column_counter,0
            MOV AX,opening_pixel_column
            MUL opening_tile_spacing
            MOV opening_start_column, AX


            INC opening_start_row

DONT_NEWLINE_OPENING_SQUARE_DRAW: ; Original: nao_pula_BRANCO_ABERTURA
                  ;black (Original comment: preto)
                  mov cx, opening_start_column  ; column
                  mov dx, opening_start_row     ; row
                  mov al, current_color         ; WHITE (Original comment)
                  mov ah, 0Ch                   ; put pixel
                  int 10h

        INC opening_start_column

        ADD BX,2 ; This BX is not used for addressing ABERTURA here, likely a leftover or for other purpose

        INC opening_column_counter
        DEC opening_counter
        CMP opening_counter,0
        JNZ OPENING_SQUARE_DRAW_LOOP

        POP DX
        POP CX
        POP BX
        POP AX

RET

DRAW_OPENING_SQUARE_PROCEDURE ENDP
    
;----- START OPENING SEQUENCE --------------------------------------- (This comment seems misplaced)

;------ START CLEAR_SCREEN_PROCEDURE -------------------------------------
CLEAR_SCREEN_PROCEDURE PROC

    PUSH AX 
    MOV AH,00h  ; Set video mode function
    MOV AL, 07h ; Video mode 7 (80x25 B&W text mode, can clear some graphics screens)
    INT 10h     ; Video interrupt
    POP AX
RET
CLEAR_SCREEN_PROCEDURE ENDP
;------ END CLEAR_SCREEN_PROCEDURE -------------------------------------
    
;----------------------- START MOVE_GHOSTS_PROCEDURE -----------------------------
MOVE_GHOSTS_PROCEDURE PROC
    
    ;FIND GHOST POSITION | GENERATE MOVEMENT NUMBER | CHECK FOR WALL | MOVE IF POSSIBLE (Original comment: ACHAR POSIÇÃO DO FANTASMAS | GERAR NÚMERO DO MOVIMENTO | VERIFICAR SE TEM PAREDE | MOVER SE POSSIVEL)
    
    ;NOTE:DO NOT MAKE PELLETS DISAPPEAR (Original comment: OBS:NÃO SUMIR COM AS PASTILHAS)
    
;-----------------------------------------------------
    
    NOP
    MOV first_random_generation_flag,1 ; Original: flag_rand_primeira
    MOV current_ghost_id,6  ; Original: fantasma_atual

    CALL GENERATE_RANDOM_NUMBER_PROCEDURE ; Original: NUM_RAND
    
RETRY_RANDOM_GREEN_GHOST: ; Original: OUTRO_RAND1
    MOV BX, green_ghost_position
    CALL CHECK_GHOST_WALL_COLLISION_PROCEDURE ; Original: VERIFICA_PAREDE_FANTASMA
    
    CMP wall_flag,1
    JE END_GREEN_GHOST_MOVEMENT_LOGIC
    ;IF THERE IS NO WALL (Original comment: SE NÃO HOUVER PAREDE)
    
    MOV AX,random_val_green_ghost
    CALL CHECK_RANDOM_VALIDITY_PROCEDURE ; Original: VERIFICA_RAND
    CMP random_flag,1
    JE RETRY_RANDOM_GREEN_GHOST
    
        MOV DX,green_ghost_column
        MOV current_pixel_column,DX
        
        MOV DX,green_ghost_row
        MOV current_pixel_row,DX
    
    MOV BX, green_ghost_position
    CALL REPLACE_PELLETS_UNDER_GHOST_PROCEDURE ; Original: RECOLOCA_PASTILHAS
    
    MOV BX, green_ghost_position
    CALL CHECK_GHOST_MOVE_DIRECTION_PROCEDURE ; Original: VERIFICA_TECLA_FANTASMA
    
    MOV AX, generated_random_number ; Original: numero_randomico
    MOV random_val_green_ghost, AX

END_GREEN_GHOST_MOVEMENT_LOGIC: ; Original: FIM_FANTASMA_GREEN
;-----------------------------------------------------

; ;-----------------------------------------------------
    NOP
    NOP
    MOV first_random_generation_flag,1
    MOV current_ghost_id,7

    CALL GENERATE_RANDOM_NUMBER_PROCEDURE
    
RETRY_RANDOM_CYAN_GHOST: ; Original: OUTRO_RAND2
    MOV BX, cyan_ghost_position
    CALL CHECK_GHOST_WALL_COLLISION_PROCEDURE
    
    CMP wall_flag,1
    JE END_CYAN_GHOST_MOVEMENT_LOGIC
    ;IF THERE IS NO WALL
    
    MOV AX,random_val_cyan_ghost
    CALL CHECK_RANDOM_VALIDITY_PROCEDURE
    CMP random_flag,1
    JE RETRY_RANDOM_CYAN_GHOST
    
        MOV DX,cyan_ghost_column
        MOV current_pixel_column,DX
        
        MOV DX,cyan_ghost_row
        MOV current_pixel_row,DX
    
    MOV BX, cyan_ghost_position
    CALL REPLACE_PELLETS_UNDER_GHOST_PROCEDURE
    
    MOV BX, cyan_ghost_position
    CALL CHECK_GHOST_MOVE_DIRECTION_PROCEDURE
    
    MOV AX, generated_random_number
    MOV random_val_cyan_ghost, AX

END_CYAN_GHOST_MOVEMENT_LOGIC: ; Original: FIM_FANTASMA_CYAN
;-----------------------------------------------------

;-----------------------------------------------------
;   
    NOP
    NOP
    NOP
    MOV first_random_generation_flag,1
    MOV current_ghost_id,8
    
    CALL GENERATE_RANDOM_NUMBER_PROCEDURE
    
RETRY_RANDOM_RED_GHOST: ; Original: OUTRO_RAND3
    MOV BX, red_ghost_position
    CALL CHECK_GHOST_WALL_COLLISION_PROCEDURE
    
    CMP wall_flag,1
    JE END_RED_GHOST_MOVEMENT_LOGIC
    ;IF THERE IS NO WALL (Original comment: SE NÃO HOUVER PAREDE)
    
    MOV AX,random_val_red_ghost
    CALL CHECK_RANDOM_VALIDITY_PROCEDURE
    CMP random_flag,1
    JE RETRY_RANDOM_RED_GHOST
    
        MOV DX,red_ghost_column
        MOV current_pixel_column,DX
        
        MOV DX,red_ghost_row
        MOV current_pixel_row,DX
    
    MOV BX, red_ghost_position
    CALL REPLACE_PELLETS_UNDER_GHOST_PROCEDURE
    
    MOV BX, red_ghost_position
    CALL CHECK_GHOST_MOVE_DIRECTION_PROCEDURE
    
    MOV AX, generated_random_number
    MOV random_val_red_ghost, AX

END_RED_GHOST_MOVEMENT_LOGIC: ; Original: FIM_FANTASMA_RED
;-----------------------------------------------------

;-----------------------------------------------------
    NOP
    NOP
    NOP
    NOP
    MOV first_random_generation_flag,1
    MOV current_ghost_id,9
    
    CALL GENERATE_RANDOM_NUMBER_PROCEDURE
    
RETRY_RANDOM_MAGENTA_GHOST: ; Original: OUTRO_RAND4
    MOV BX, magenta_ghost_position
    CALL CHECK_GHOST_WALL_COLLISION_PROCEDURE
    
    CMP wall_flag,1
    JE END_MAGENTA_GHOST_MOVEMENT_LOGIC
    ;IF THERE IS NO WALL (Original comment: SE NÃO HOUVER PAREDE)
    
    MOV AX,random_val_magenta_ghost
    CALL CHECK_RANDOM_VALIDITY_PROCEDURE
    CMP random_flag,1
    JE RETRY_RANDOM_MAGENTA_GHOST
    
        MOV DX,magenta_ghost_column
        MOV current_pixel_column,DX
        
        MOV DX,magenta_ghost_row
        MOV current_pixel_row,DX
    
    MOV BX, magenta_ghost_position
    CALL REPLACE_PELLETS_UNDER_GHOST_PROCEDURE
    
    MOV BX, magenta_ghost_position
    CALL CHECK_GHOST_MOVE_DIRECTION_PROCEDURE
    
    MOV AX, generated_random_number
    MOV random_val_magenta_ghost, AX

END_MAGENTA_GHOST_MOVEMENT_LOGIC: ; Original: FIM_FANTASMA_MAGENTA
;-----------------------------------------------------

RET
MOVE_GHOSTS_PROCEDURE ENDP
;----------------------- END CHECK WALL ----------------------------------- (Comment seems contextually like "END GHOST MOVEMENT")
    
;-------------- START GENERATE_RANDOM_NUMBER_PROCEDURE --------------------------
GENERATE_RANDOM_NUMBER_PROCEDURE PROC
    
PUSH AX
PUSH BX
PUSH CX 
PUSH DX   

    MOV AH, 2CH      ; Get system time DOS function
    INT 21H          ; Call DOS
    
    MOV BL,DL        ; Use hundredths of a second (DL) as a base for randomness
    MOV BH, 0        ; Clear BH to make BX = DL
    ADD BX, current_ghost_id ; Add current ghost ID to vary seed per ghost
    
    MOV AX,9
    MUL BX           ; AX = BX * 9
    
    XOR DX,DX        ; Clear DX for division
    MOV BX,3
    DIV BX           ; AX = AX / 3, DX = AX % 3
    MOV BX,AX        ; Use quotient for next step
    
    MOV AX,7
    MUL BX           ; AX = BX * 7
    
    XOR DX,DX
    MOV BX,4
    DIV BX           ; AX = AX / 4, DX = AX % 4
    MOV BX,AX
    
    MOV generated_random_number, DX ; Store the remainder (0-3) as the random number
    
POP DX
POP CX
POP BX
POP AX
    
RET
GENERATE_RANDOM_NUMBER_PROCEDURE ENDP

;-------------- END GENERATE_RANDOM_NUMBER_PROCEDURE --------------------------


;-------------- START CHECK_RANDOM_VALIDITY_PROCEDURE --------------------------
CHECK_RANDOM_VALIDITY_PROCEDURE PROC

    MOV random_flag,0
    ; AX = PREVIOUS_DIRECTION (Original comment: AX = ANTERIOR)
    
    CMP AX,0 ; If previous direction was Up (0)
    JE CHECK_RANDOM_IF_PREV_UP
    
    CMP AX,1 ; If previous direction was Left (1)
    JE CHECK_RANDOM_IF_PREV_LEFT
    
    CMP AX,2 ; If previous direction was Right (2)
    JE CHECK_RANDOM_IF_PREV_RIGHT
    
    CMP AX,3 ; If previous direction was Down (3)
    JE CHECK_RANDOM_IF_PREV_DOWN
    
CHECK_RANDOM_IF_PREV_UP:    CMP generated_random_number,3 ; Check if new direction is Down (3) - a reversal
                            JNE END_CHECK_RANDOM_VALIDITY_LOGIC
                            MOV random_flag,1 ; Set flag indicating reversal attempt
                            JMP HANDLE_DIRECTION_CHANGE
    
CHECK_RANDOM_IF_PREV_LEFT:  CMP generated_random_number,2 ; Check if new direction is Right (2)
                            JNE END_CHECK_RANDOM_VALIDITY_LOGIC
                            MOV random_flag,1
                            JMP HANDLE_DIRECTION_CHANGE
    
CHECK_RANDOM_IF_PREV_RIGHT: CMP generated_random_number,1 ; Check if new direction is Left (1)
                            JNE END_CHECK_RANDOM_VALIDITY_LOGIC
                            MOV random_flag,1
                            JMP HANDLE_DIRECTION_CHANGE
    
CHECK_RANDOM_IF_PREV_DOWN:  CMP generated_random_number,0 ; Check if new direction is Up (0)
                            JNE END_CHECK_RANDOM_VALIDITY_LOGIC
                            MOV random_flag,1
                            JMP HANDLE_DIRECTION_CHANGE
    
HANDLE_DIRECTION_CHANGE:    CMP first_random_generation_flag,1
                            JNE CONTINUE_DIRECTION_CHANGE_LOGIC
                            ;IF IT'S THE FIRST TIME (Original comment: SE FOOR A PRIMEIRA VEZ)
                            MOV generated_random_number,0 ; Force a default direction (e.g., Up)
                            
CONTINUE_DIRECTION_CHANGE_LOGIC:
                            MOV first_random_generation_flag,0
                            
                            ADD generated_random_number,1 ; Try next direction
                            ;CMP generated_random_number,4
                            ;JNE END_CHECK_RANDOM_VALIDITY_LOGIC
                            ;IF IT IS 4 (Original comment: SE FOR 4)
                            ;MOV generated_random_number,0 ; Wrap around

    
END_CHECK_RANDOM_VALIDITY_LOGIC:
    
    
    
    
RET
CHECK_RANDOM_VALIDITY_PROCEDURE ENDP
;-------------- END CHECK_RANDOM_VALIDITY_PROCEDURE --------------------------

    
;----------------------- START CHECK_GHOST_WALL_COLLISION_PROCEDURE -----------------------------------
CHECK_GHOST_WALL_COLLISION_PROCEDURE PROC

    MOV wall_flag,0
    
    CMP generated_random_number,0 ; Direction Up
    JE CHECK_WALL_UP_FOR_GHOST
    
    CMP generated_random_number,1 ; Direction Left
    JE CHECK_WALL_LEFT_FOR_GHOST
    
    CMP generated_random_number,2 ; Direction Right
    JE CHECK_WALL_RIGHT_FOR_GHOST
    
    CMP generated_random_number,3 ; Direction Down
    JE CHECK_WALL_DOWN_FOR_GHOST

    
CHECK_WALL_UP_FOR_GHOST:        CMP Chosen_Level_Map[BX-38],1
                                JNE END_CHECK_GHOST_WALL_COLLISION_LOGIC
                                MOV wall_flag,1
                                JMP END_CHECK_GHOST_WALL_COLLISION_LOGIC

CHECK_WALL_LEFT_FOR_GHOST:      CMP Chosen_Level_Map[BX-2],1
                                JNE END_CHECK_GHOST_WALL_COLLISION_LOGIC
                                MOV wall_flag,1
                                JMP END_CHECK_GHOST_WALL_COLLISION_LOGIC
        
CHECK_WALL_RIGHT_FOR_GHOST:     CMP Chosen_Level_Map[BX+2],1
                                JNE END_CHECK_GHOST_WALL_COLLISION_LOGIC
                                MOV wall_flag,1
                                JMP END_CHECK_GHOST_WALL_COLLISION_LOGIC
    
CHECK_WALL_DOWN_FOR_GHOST:      CMP Chosen_Level_Map[BX+38],1
                                JNE END_CHECK_GHOST_WALL_COLLISION_LOGIC
                                MOV wall_flag,1

END_CHECK_GHOST_WALL_COLLISION_LOGIC:

RET
CHECK_GHOST_WALL_COLLISION_PROCEDURE ENDP
;----------------------- END CHECK_GHOST_WALL_COLLISION_PROCEDURE -----------------------------------


;----------------------- START ADJUST_ROW_COLUMN_PROCEDURE -----------------------------------
ADJUST_ROW_COLUMN_PROCEDURE PROC

    MOV DX, current_ghost_id
    
    CMP generated_random_number,0 ; Up Arrow direction
    JE UP_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED
    
    CMP generated_random_number,1 ; Left Arrow direction
    JE LEFT_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED
    
    CMP generated_random_number,2 ; Right Arrow direction
    JE RIGHT_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED
    
    CMP generated_random_number,3 ; Down Arrow direction
    JE DOWN_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED

    
UP_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED:         ;ADD current_ghost_row, 1
                                JMP END_ADJUST_COORDINATES_LOGIC

LEFT_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED:       ;ADD current_ghost_column, 1
                                JMP END_ADJUST_COORDINATES_LOGIC
                                
RIGHT_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED:      ;SUB current_ghost_column, 1      
                                JMP END_ADJUST_COORDINATES_LOGIC
    
DOWN_ADJUST_PELLET_REPLACEMENT_HANDLER_COMMENTED:       ;SUB current_ghost_row, 1    
                                JMP END_ADJUST_COORDINATES_LOGIC

END_ADJUST_COORDINATES_LOGIC:

RET
ADJUST_ROW_COLUMN_PROCEDURE ENDP
;----------------------- END CHECK_WALL_COLLISION_PROCEDURE ----------------------------------- (Original comment: FIM VERIFICA PAREDE)

;----------------------- START CHECK_GHOST_MOVE_DIRECTION_PROCEDURE ----------------------------------- (Original comment: INICIO VERIFICA PAREDE)
CHECK_GHOST_MOVE_DIRECTION_PROCEDURE PROC

    MOV DX, current_ghost_id
    
    CMP generated_random_number,0 ; Up direction for ghost
    JE MOVE_GHOST_UP_HANDLER
    
    CMP generated_random_number,1 ; Left direction for ghost
    JE MOVE_GHOST_LEFT_HANDLER
    
    CMP generated_random_number,2 ; Right direction for ghost
    JE TARGET_LOLA8_GHOST_MOVE_RIGHT_HANDLER
    
    CMP generated_random_number,3 ; Down direction for ghost
    JE TARGET_LOLA2_GHOST_MOVE_DOWN_HANDLER

    
MOVE_GHOST_UP_HANDLER:          CMP Chosen_Level_Map[BX],DX
                                JNE DONT_ERASE_GHOST_FROM_OLD_POS1_UP
                                
                                MOV Chosen_Level_Map[BX],2 ; Mark old position for erase
DONT_ERASE_GHOST_FROM_OLD_POS1_UP:
                                SUB BX,38 ; Move ghost index up
                                
                                CMP Chosen_Level_Map[BX],5 ; Check if Pacman is at new position
                                JNE PACMAN_NOT_FOUND_BY_GHOST_UP1_DETAIL
                                ;IF PACMAN IS IN THIS POSITION (Original comment: SE O PACMAN ESTIVER NESSA POSICAO)
                                
                                    CMP power_pellet_active_state,800
                                    JE SUPER_PELLET_ACTIVE_GHOST_UP_COLLISION_DETAIL
                                    
                                    ;IF THE PELLET IS DEACTIVATED (Original comment: SE A PASTILHA ESTIVER DESATIVADA)
                                    CALL LOSE_LIFE_PROCEDURE
                                    JMP PACMAN_NOT_FOUND_BY_GHOST_UP1_DETAIL
                                    
SUPER_PELLET_ACTIVE_GHOST_UP_COLLISION_DETAIL: ;MOV BX, red_ghost_position (Original comment)
                                               ;MOV Chosen_Level_Map[BX], 0 (Original comment)
                                        
                                        MOV BX, 44 ; Example respawn index (original used Red's)
                                        MOV Chosen_Level_Map[BX], DX ; Place current ghost (ID in DX)
                                        JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
PACMAN_NOT_FOUND_BY_GHOST_UP1_DETAIL:
                                MOV Chosen_Level_Map[BX], DX ; Place ghost ID at new position
                                JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
TARGET_LOLA2_GHOST_MOVE_DOWN_HANDLER: JMP MOVE_GHOST_DOWN_HANDLER
                                
TARGET_LOLA8_GHOST_MOVE_RIGHT_HANDLER: JMP MOVE_GHOST_RIGHT_HANDLER
                                
MOVE_GHOST_LEFT_HANDLER:        CMP Chosen_Level_Map[BX],DX
                                JNE DONT_ERASE_GHOST_FROM_OLD_POS2_LEFT
                                
                                MOV Chosen_Level_Map[BX],2
DONT_ERASE_GHOST_FROM_OLD_POS2_LEFT:
                                
                                    CMP Chosen_Level_Map[BX-2],3 ; Check tile left of current for teleport trigger
                                    JNE CONTINUE_GHOST_MOVE_LEFT_PATH1_DETAIL
                                    ;TELEPORT
                                    MOV BX,412 ; Teleport destination for ghost
                                    MOV Chosen_Level_Map[BX],DX
                                    JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
CONTINUE_GHOST_MOVE_LEFT_PATH1_DETAIL:
                                SUB BX,2 ; Move ghost index left
                                
                                CMP Chosen_Level_Map[BX],5
                                JNE PACMAN_NOT_FOUND_BY_GHOST_LEFT2_DETAIL
                                ;IF PACMAN IS IN THIS POSITION
                                
                                    CMP power_pellet_active_state,800
                                    JE SUPER_PELLET_ACTIVE_GHOST_LEFT_COLLISION_DETAIL
                                    
                                    ;IF THE PELLET IS DEACTIVATED
                                    CALL LOSE_LIFE_PROCEDURE
                                    JMP PACMAN_NOT_FOUND_BY_GHOST_LEFT2_DETAIL
                                    
SUPER_PELLET_ACTIVE_GHOST_LEFT_COLLISION_DETAIL: ;MOV BX, red_ghost_position (Original comment)
                                                 ;MOV Chosen_Level_Map[BX], 0 (Original comment)
                                        
                                        MOV BX, 44 ; Example respawn index
                                        MOV Chosen_Level_Map[BX], DX
                                        JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
PACMAN_NOT_FOUND_BY_GHOST_LEFT2_DETAIL:
                                MOV Chosen_Level_Map[BX], DX
                                JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
MOVE_GHOST_RIGHT_HANDLER:       CMP Chosen_Level_Map[BX],DX
                                JNE DONT_ERASE_GHOST_FROM_OLD_POS3_RIGHT
                                
                                MOV Chosen_Level_Map[BX],2
DONT_ERASE_GHOST_FROM_OLD_POS3_RIGHT:
                                
                                    CMP Chosen_Level_Map[BX+2],3 ; Check tile right of current for teleport
                                    JNE CONTINUE_GHOST_MOVE_RIGHT_PATH2_DETAIL
                                    ;TELEPORT
                                    MOV BX,384 ; Teleport destination for ghost
                                    MOV Chosen_Level_Map[BX],DX
                                    JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
CONTINUE_GHOST_MOVE_RIGHT_PATH2_DETAIL:
                                ADD BX,2 ; Move ghost index right
                                
                                CMP Chosen_Level_Map[BX],5
                                JNE PACMAN_NOT_FOUND_BY_GHOST_RIGHT3_DETAIL
                                ;IF PACMAN IS IN THIS POSITION
                                
                                    CMP power_pellet_active_state,800
                                    JE SUPER_PELLET_ACTIVE_GHOST_RIGHT_COLLISION_DETAIL
                                    
                                    ;IF THE PELLET IS DEACTIVATED
                                    CALL LOSE_LIFE_PROCEDURE
                                    JMP PACMAN_NOT_FOUND_BY_GHOST_RIGHT3_DETAIL
                                    
SUPER_PELLET_ACTIVE_GHOST_RIGHT_COLLISION_DETAIL: ;MOV BX, red_ghost_position (Original comment)
                                                  ;MOV Chosen_Level_Map[BX], 0 (Original comment)
                                        
                                        MOV BX, 44 ; Example respawn index
                                        MOV Chosen_Level_Map[BX], DX
                                        JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
PACMAN_NOT_FOUND_BY_GHOST_RIGHT3_DETAIL:
                                MOV Chosen_Level_Map[BX], DX
                                JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
    
MOVE_GHOST_DOWN_HANDLER:        CMP Chosen_Level_Map[BX],DX
                                JNE DONT_ERASE_GHOST_FROM_OLD_POS4_DOWN
                                
                                MOV Chosen_Level_Map[BX],2
DONT_ERASE_GHOST_FROM_OLD_POS4_DOWN:
                                ADD BX,38 ; Move ghost index down
                                
                                CMP Chosen_Level_Map[BX],5
                                JNE PACMAN_NOT_FOUND_BY_GHOST_DOWN4_DETAIL
                                ;IF PACMAN IS IN THIS POSITION
                                
                                    CMP power_pellet_active_state,800
                                    JE SUPER_PELLET_ACTIVE_GHOST_DOWN_COLLISION_DETAIL
                                    
                                    ;IF THE PELLET IS DEACTIVATED
                                    CALL LOSE_LIFE_PROCEDURE
                                    JMP PACMAN_NOT_FOUND_BY_GHOST_DOWN4_DETAIL
                                    
SUPER_PELLET_ACTIVE_GHOST_DOWN_COLLISION_DETAIL: ;MOV BX, red_ghost_position (Original comment)
                                                 ;MOV Chosen_Level_Map[BX], 0 (Original comment)
                                        
                                        MOV BX, 44 ; Example respawn index
                                        MOV Chosen_Level_Map[BX], DX
                                        JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC
                                
PACMAN_NOT_FOUND_BY_GHOST_DOWN4_DETAIL:
                                MOV Chosen_Level_Map[BX], DX
                                JMP END_CHECK_GHOST_MOVE_DIRECTION_LOGIC

END_CHECK_GHOST_MOVE_DIRECTION_LOGIC:

RET
CHECK_GHOST_MOVE_DIRECTION_PROCEDURE ENDP
;----------------------- END CHECK_WALL_COLLISION_PROCEDURE ----------------------------------- (Original comment: FIM VERIFICA PAREDE)


;----------------------- START LOSE_LIFE_PROCEDURE -----------------------------------
LOSE_LIFE_PROCEDURE PROC
    
    PUSH BX
    CALL DRAW_PACMAN_DEATH_ANIMATION_PROCEDURE ; Original: PACMAN_MORTE_IMAGEM
    DEC lives_counter
    
    CMP lives_counter,2
    JE TWO_LIVES_REMAINING_HANDLER
    
    CMP lives_counter,1
    JE ONE_LIFE_REMAINING_HANDLER
    
    JMP ZERO_LIVES_REMAINING_HANDLER
    
TWO_LIVES_REMAINING_HANDLER:    MOV Current_Column, 530
                                MOV Current_Row, 130
                                CALL DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE ; Original: QUADRADO_lives
                                JMP ZERO_LIVES_REMAINING_HANDLER ; This jump seems to bypass some logic, but translating as is
                                
ONE_LIFE_REMAINING_HANDLER:     MOV Current_Column, 490
                                MOV Current_Row, 130
                                CALL DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE
                                JMP ZERO_LIVES_REMAINING_HANDLER
    
ZERO_LIVES_REMAINING_HANDLER: 
    
    POP BX
        
    MOV SI,626 ; Pacman respawn index
    MOV Chosen_Level_Map[SI],5 ; Place Pacman
    MOV pacman_position_index, SI
    MOV pacman_direction,0
    
    MOV current_key_pressed, 00
    
    

RET 
LOSE_LIFE_PROCEDURE ENDP
;----------------------- START LOSE_LIFE_PROCEDURE ----------------------------------- (Original comment: INICIO PERDE VIDA)


;-------------------- START INTEGRATION --------------------------------------------
;-----------CHECK LARGE PELLET----------
CHECK_LARGE_PELLET_PROCEDURE PROC ; Original: VERIFICA_PASTILHAGRANDE

    MOV BX,pacman_position_index
    MOV power_pellet_flag,0 ; Original: flag_pastilha
    
    CMP DH,48H ; Up Arrow key
    JE CHECK_UP_FOR_FEAR_MODE_PELLET_HANDLER ; Original: PAREDE_CIMA_medo
    
    CMP DH,4BH ; Left Arrow key
    JE CHECK_LEFT_FOR_FEAR_MODE_PELLET_HANDLER ; Original: PAREDE_ESQUERDA_medo
    
    CMP DH,4DH ; Right Arrow key
    JE CHECK_RIGHT_FOR_FEAR_MODE_PELLET_HANDLER ; Original: PAREDE_DIREITA_medo
    
    CMP DH,50H ; Down Arrow key
    JE CHECK_DOWN_FOR_FEAR_MODE_PELLET_HANDLER ; Original: PAREDE_BAIXO_medo

    
CHECK_UP_FOR_FEAR_MODE_PELLET_HANDLER:  CMP Chosen_Level_Pellet[BX-38],2
                                        JNE END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
                                        
                                        MOV power_pellet_flag,1
                                        ;MOV Chosen_Level_Pellet[BX-38],0
                                        JMP END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER

CHECK_LEFT_FOR_FEAR_MODE_PELLET_HANDLER:CMP Chosen_Level_Pellet[BX-2],2
                                        JNE END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
                                        
                                        MOV power_pellet_flag,1
                                        ;MOV Chosen_Level_Pellet[BX-2],0
                                        JMP END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
        
CHECK_RIGHT_FOR_FEAR_MODE_PELLET_HANDLER:CMP Chosen_Level_Pellet[BX+2],2
                                        JNE END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
                                        
                                        MOV power_pellet_flag,1
                                        ;MOV Chosen_Level_Pellet[BX+2],0
                                        JMP END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
    
CHECK_DOWN_FOR_FEAR_MODE_PELLET_HANDLER:CMP Chosen_Level_Pellet[BX+38],2
                                        JNE END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER
                                        
                                        MOV power_pellet_flag,1
                                        ;MOV Chosen_Level_Pellet[BX+38],0

END_CHECK_FEAR_MODE_PELLET_LOGIC_HANDLER: ; Original: FIM_VERIFICA_MEDO
    
    CMP power_pellet_active_state, 800
    JNE EFFECT_DEACTIVATED_HANDLER_LOGIC
    ;IF THE EFFECT IS ACTIVE (Original comment: SE O EFEITO ESTIVER ATIVO)

    CALL GET_CURRENT_TIME_PROCEDURE
    SUB AX, time_before_event
    
    CMP AX, 8 ; Timer duration check
    JBE EFFECT_DEACTIVATED_HANDLER_LOGIC
    ;IF MORE THAN 5 SECONDS HAVE PASSED (Original comment: SE TIVER PASSADO MAIS DE 5 SEGUNDOS) (Comment mismatch with code)
    MOV power_pellet_active_state, 0
    
EFFECT_DEACTIVATED_HANDLER_LOGIC: ; Original: EFEITO_DESATIVADO
    CMP power_pellet_flag,1
    JE POWER_PELLET_FOUND_HANDLER_LOGIC_DETAIL
    

RET

    
POWER_PELLET_FOUND_HANDLER_LOGIC_DETAIL: ; Original: pastilhaEncontrada

        MOV power_pellet_active_state, 800 ; Set scared mode sprite offset
        
        PUSH AX
        CALL GET_CURRENT_TIME_PROCEDURE
        MOV time_before_event, AX
        POP AX
        
        RET


CHECK_LARGE_PELLET_PROCEDURE ENDP
;----------- END CHECK LARGE PELLET----------
;-------------------- END INTEGRATION --------------------------------------------


;------------------ START GET_CURRENT_TIME_PROCEDURE -----------------------------
GET_CURRENT_TIME_PROCEDURE PROC  ; Original: PEGANDO_TEMPO
    
PUSH BX
PUSH CX 
PUSH DX   
                ;DH SECONDS CL MINUTES
    MOV AH, 2CH ; DOS Get System Time function
    INT 21H
    
    MOV DL,DH   ; DL = seconds
    MOV DH,0    ; Clear DH for word operation if DX is used
    
    MOV pellet_effect_timer_storage,DX ; Store seconds in pellet_effect_timer_storage (DX now holds 00:seconds)
    
    XOR AX,AX
    MOV AL,CL   ; AL = minutes
    
    MOV CX,60
    MUL CX      ; AX = AL * CX (minutes * 60 = total seconds from minutes)
    
    ADD AX, pellet_effect_timer_storage ; Add stored seconds to total seconds in AX
    
POP DX
POP CX
POP BX
    
RET
GET_CURRENT_TIME_PROCEDURE ENDP
;------------------ END GET_CURRENT_TIME_PROCEDURE -----------------------------



;-------------------  START REPLACE_PELLETS_UNDER_GHOST_PROCEDURE --------------------
REPLACE_PELLETS_UNDER_GHOST_PROCEDURE PROC
        
        CMP Chosen_Level_Pellet[BX], 1 ; Normal Pellet
        JE COMMON_PELLET_FOUND_HANDLER
    ; END JOSHUA
    ; START SHERWIN 
        CMP Chosen_Level_Pellet[BX], 2 ; Super Pellet
        JE SUPER_PELLET_FOUND_HANDLER
        
        CMP Chosen_Level_Pellet[BX], 5 ; Fruit
        JE SPECIAL_FRUIT_FOUND_HANDLER
        
        JMP END_REPLACE_PELLETS_LOGIC_HANDLER
        
COMMON_PELLET_FOUND_HANDLER:    MOV current_color,0
                                CALL DRAW_SQUARE_TILE ; Erase whatever was there (e.g. ghost trail)
                                MOV Chosen_Level_Map[BX],0 ; Clear the game map at this ghost's previous position
                                
                                CALL DRAW_NORMAL_PELLET_SPRITE_PROCEDURE
                                JMP END_REPLACE_PELLETS_LOGIC_HANDLER
        
SUPER_PELLET_FOUND_HANDLER:     MOV current_color, 0
                                CALL DRAW_SQUARE_TILE
                                MOV Chosen_Level_Map[BX], 0
                                
                                CALL DRAW_LARGE_PELLET_SPRITE_PROCEDURE
                                JMP END_REPLACE_PELLETS_LOGIC_HANDLER
        
SPECIAL_FRUIT_FOUND_HANDLER:    MOV current_color,0
                                CALL DRAW_SQUARE_TILE
                                MOV Chosen_Level_Map[BX],0
                                
                                CALL PRINT_FRUIT_SPRITE_PROCEDURE
                                JMP END_REPLACE_PELLETS_LOGIC_HANDLER
                                
        END_REPLACE_PELLETS_LOGIC_HANDLER:
        
RET     
REPLACE_PELLETS_UNDER_GHOST_PROCEDURE ENDP
;-------------------  END REPLACE_PELLETS_UNDER_GHOST_PROCEDURE --------------------

;-------------------  START CHECK_PELLET_AND_SCORE_PROCEDURE -------------------- (Original comment: INICIO VERIFICA PASTILHA NORMAL)
CHECK_PELLET_AND_SCORE_PROCEDURE PROC
    
    CMP Chosen_Level_Pellet[BX], 1 ; Normal Pellet
    JE NORMAL_PELLET_COLLECTED_HANDLER
    
    CMP Chosen_Level_Pellet[BX], 2 ; Super Pellet
    JE SUPER_PELLET_COLLECTED_HANDLER
    
    CMP Chosen_Level_Pellet[BX], 5 ; Fruit
    JE FRUIT_COLLECTED_HANDLER
    
    JMP END_CHECK_PELLET_SCORE_LOGIC_HANDLER
    
NORMAL_PELLET_COLLECTED_HANDLER:    MOV Chosen_Level_Pellet[BX], 0 ; Remove pellet from map
                                    ADD total_score,10
                                    INC pellets_collected_counter
                                    JMP END_CHECK_PELLET_SCORE_LOGIC_HANDLER
                                    
SUPER_PELLET_COLLECTED_HANDLER:     MOV Chosen_Level_Pellet[BX], 0
                                    ADD total_score,50
                                    JMP END_CHECK_PELLET_SCORE_LOGIC_HANDLER
    
FRUIT_COLLECTED_HANDLER:            MOV Chosen_Level_Pellet[BX], 0
                                    ADD total_score,200
                                    JMP END_CHECK_PELLET_SCORE_LOGIC_HANDLER
                                    
    END_CHECK_PELLET_SCORE_LOGIC_HANDLER:

RET
CHECK_PELLET_AND_SCORE_PROCEDURE ENDP
;-------------------  START CHECK_PELLET_AND_SCORE_PROCEDURE -------------------- (Original comment: INICIO VERIFICA PASTILHA NORMAL)


;----------------------- START DRAW_PACMAN_DEATH_ANIMATION_PROCEDURE -----------------------------; (Original comment: INICIO PACMAN IMAGEM)
DRAW_PACMAN_DEATH_ANIMATION_PROCEDURE PROC ; Original: PACMAN_MORTE_IMAGEM

PUSH AX
        
        MOV pacman_animation_counter,0 ; Original: controlador_pacman
        
        MOV AX,pacman_current_column ; Original: coluna_pacman_atual
        MUL tile_spacing_pixels      ; Original: separador_quadrado
        MOV Current_Column, AX       ; Original: coluna
        
        MOV AX,pacman_current_row    ; Original: linha_pacman_atual
        MUL tile_spacing_pixels      ; Original: separador_quadrado
        MOV Current_Row, AX          ; Original: linha
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        
        MOV generic_counter, 3200 ;quantity of items in the sprite data (8 frames * 20x20 words) ; Original: cont, PACMAN_MORTE

        PACMAN_DEATH_ANIMATION_LOOP: ; Original: VEZES_PACMAN_MORTE

        MOV AX, PACMAN_DEATH[BX] ; Original: PACMAN_MORTE

        ;--------------------- START ANIMATION FRAME 2 -------------------------------
        CMP death_animation_controller,400 ;number of elements per frame ; Original: controlador_anima_morte
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME2
        ;advance frame (Original comment: pula linha)
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME2: ; Original: nao_pula_ANIMA_MORTE
        
        ;--------------------- END ANIMATION FRAME 2 -------------------------------
        
        ;--------------------- START ANIMATION FRAME 3 -------------------------------
        CMP death_animation_controller,800 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME3
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME3: ; Original: nao_pula_ANIMA_MORTE3
        
        ;--------------------- END ANIMATION FRAME 3 -------------------------------
        
        ;--------------------- START ANIMATION FRAME 4 -------------------------------
        CMP death_animation_controller,1200 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME4
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME4: ; Original: nao_pula_ANIMA_MORTE4
        
        ;--------------------- END ANIMATION FRAME 4 -------------------------------
        
        ;--------------------- START ANIMATION FRAME 5 -------------------------------
        CMP death_animation_controller,1600 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME5
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME5: ; Original: nao_pula_ANIMA_MORTE5
        
        ;--------------------- END ANIMATION FRAME 5 -------------------------------
        
        
        ;--------------------- START ANIMATION FRAME 6 -------------------------------
        CMP death_animation_controller,2000 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME6
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME6: ; Original: nao_pula_ANIMA_MORTE6
        
        ;--------------------- END ANIMATION FRAME 6 -------------------------------
        
        ;--------------------- START ANIMATION FRAME 7 -------------------------------
        CMP death_animation_controller,2400 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME7
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME7: ; Original: nao_pula_ANIMA_MORTE7
        
        ;--------------------- END ANIMATION FRAME 7 -------------------------------
        JMP CONTINUE_DEATH_SPRITE_PRINTING_LOGIC
        
TARGET_LOLA9_DEATH_ANIM_LOOP: JMP PACMAN_DEATH_ANIMATION_LOOP ; Original: LOLA9: JMP VEZES_PACMAN_MORTE
        
CONTINUE_DEATH_SPRITE_PRINTING_LOGIC: ; Original: CONTINUA_PRINT_MORTE
        ;--------------------- START ANIMATION FRAME 8 -------------------------------
        CMP death_animation_controller,2800 ;number of elements
        JNE DONT_ADVANCE_DEATH_ANIM_FRAME8
        ;advance frame
        
        CALL ANIMATION_DELAY_PROCEDURE
        MOV death_animation_controller,0 ; Reset animation for looping/next state
        
        CALL RESET_PACMAN_COORDINATES_PROCEDURE

        DONT_ADVANCE_DEATH_ANIM_FRAME8: ; Original: nao_pula_ANIMA2_MORTE8
        
        ;--------------------- END ANIMATION FRAME 8 -------------------------------
        
        ;----------------------- RESETTING TO COLUMN 0 FOR SPRITE DRAWING --------------------------------- (Original comment: VOLTANDO PARA CULUNA 0)
        CMP pacman_animation_counter,20 ;number of columns in sprite
        JNE DONT_NEWLINE_DEATH_SPRITE_DRAW_LOGIC
        ;new line in sprite
        MOV pacman_animation_counter,0
        
        CALL RESET_PACMAN_COLUMN_PROCEDURE
        
        INC Current_Row
DONT_NEWLINE_DEATH_SPRITE_DRAW_LOGIC: ; Original: nao_pula2_PACMAN_MORTE
        ;----------------------- RESETTING TO COLUMN 0 FOR SPRITE DRAWING ---------------------------------
        
        CMP AX,14
        JE YELLOW_DEATH_SPRITE_PIXEL_HANDLER
                ;BLACK (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                ;mov al, 0             ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_DEATH_SPRITE_PIXEL_HANDLER

        YELLOW_DEATH_SPRITE_PIXEL_HANDLER: ;YELLOW (Original comment: AMARELO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 14              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_DEATH_SPRITE_PIXEL_HANDLER: ; Original: fim2_PACMAN_MORTE
        INC Current_Column

        ADD BX,2

        INC pacman_animation_counter
        INC death_animation_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ TARGET_LOLA9_DEATH_ANIM_LOOP ; Original: JNZ LOLA9

RET
DRAW_PACMAN_DEATH_ANIMATION_PROCEDURE ENDP
;----------------------- END DRAW_PACMAN_DEATH_ANIMATION_PROCEDURE -----------------------------; (Original comment: FIM PACMAN IMAGEM)


;--------------------------------------------------------------------------------
PRINT_LIVES_ICON_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var ; Commented out in original
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var ; Commented out in original
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 900 ;quantity of items in the sprite data (30x30 sprite) ; Original: cont, LIVES

        LIVES_ICON_DRAW_LOOP: ; Original: VEZES_LIVES
    
        MOV AX, LIVES[BX] ; Original: LIVES
    
        CMP lives_display_controller,30 ;number of columns in sprite
        JNE DONT_NEWLINE_LIVES_ICON_DRAW_LOGIC
        ;new line in sprite
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_LIVES_ICON_DRAW_LOGIC: ; Original: nao_pula_LIVES
    
        CMP AX,14 ; Yellow color for lives icon
        JE DRAW_YELLOW_LIVES_ICON_PIXEL_HANDLER
        ;BLACK (Transparent part)
        mov cx, Current_Column  ; column
        mov dx, Current_Row     ; row
        mov al, 00              ; WHITE (Original comment)
        mov ah, 0Ch             ; put pixel
        int 10h
        JMP END_DRAW_LIVES_ICON_PIXEL_HANDLER
        
DRAW_YELLOW_LIVES_ICON_PIXEL_HANDLER: ; Original: AMARELO_LIVES
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 14              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        JMP END_DRAW_LIVES_ICON_PIXEL_HANDLER
        
        END_DRAW_LIVES_ICON_PIXEL_HANDLER: ; Original: fim_LIVES
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ LIVES_ICON_DRAW_LOOP
    
RET
PRINT_LIVES_ICON_PROCEDURE ENDP
;--------------------------------------------------------------------------------

;--------------------------------------------------------------------------------
PRINT_LIVES_TEXT_SPRITE_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 1776 ;quantity of items in the sprite data (74x24 sprite) ; Original: cont, LIVES_ESCRITO
    
        LIVES_TEXT_DRAW_LOOP: ; Original: VEZES_LIVES_ESCRITO
    
        MOV AX, LIVES_WRITTEN[BX] ; Original: LIVES_ESCRITO
    
        CMP lives_display_controller,74 ;number of columns in sprite
        JNE DONT_NEWLINE_LIVES_TEXT_DRAW_LOGIC
        ;new line in sprite
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_LIVES_TEXT_DRAW_LOGIC: ; Original: nao_pula_LIVES_ESCRITO
    
        CMP AX,15 ; White color for text
        JE DRAW_WHITE_LIVES_TEXT_PIXEL_HANDLER
        ;BLACK (Transparent part)
        MOV current_color, 0
        
        mov cx, Current_Column  ; column
        mov dx, Current_Row     ; row
        mov al, 0               ; CHOSEN COLOR (Original comment, but drawing black)
        mov ah, 0Ch             ; put pixel
        int 10h
        ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE ; Original: QUADRADO_escrito
        JMP END_DRAW_LIVES_TEXT_PIXEL_HANDLER
        
DRAW_WHITE_LIVES_TEXT_PIXEL_HANDLER: ; Original: BRANCO_LIVES_ESCRITO
                        MOV current_color, 15
                        
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; CHOSEN COLOR (Original comment, drawing white)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE
                        JMP END_DRAW_LIVES_TEXT_PIXEL_HANDLER
        
        END_DRAW_LIVES_TEXT_PIXEL_HANDLER: ; Original: fim_LIVES_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ LIVES_TEXT_DRAW_LOOP
    
RET
PRINT_LIVES_TEXT_SPRITE_PROCEDURE ENDP
;--------------------------------------------------------------------------------

;-------------------- START DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE --------------------; (Original comment: INÍCIO QUADRADO)
DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE PROC ; Original: QUADRADO_escrito_titulo
PUSH AX
PUSH BX
PUSH CX
PUSH DX

MOV column_counter,0
MOV square_pixel_counter, 9 ; Original: cont_quadrado (3x3 scaled pixel)

MOV AX, Current_Column ; Uses pre-set Current_Column
MUL text_char_pixel_spacing ; Original: separador_quadrado_escrito
MOV char_pixel_draw_column, AX ; Original: coluna_quadrado

MOV AX, Current_Row ; Uses pre-set Current_Row
MUL text_char_pixel_spacing
MOV char_pixel_draw_row, AX ; Original: linha_quadrado

WRITTEN_SQUARE_TITLE_LOOP: ; Original: VEZES_BRANCO_escrito2
CMP column_counter,3
JNE DONT_NEWLINE_WRITTEN_SQUARE_TITLE_LOGIC
;new line

MOV column_counter,0
MOV AX, Current_Column
MUL text_char_pixel_spacing
MOV char_pixel_draw_column, AX


INC char_pixel_draw_row

DONT_NEWLINE_WRITTEN_SQUARE_TITLE_LOGIC: ; Original: nao_pula_BRANCO_escrito2
        ;printing
        mov cx, char_pixel_draw_column  ; column
        mov dx, char_pixel_draw_row     ; row
        mov al, current_color           ; CHOSEN COLOR (Original comment: COR ESCOLHIDA)
        mov ah, 0Ch                     ; put pixel
        int 10h

INC char_pixel_draw_column

;ADD BX,2 ; Not used for addressing sprite data here

INC column_counter
DEC square_pixel_counter
CMP square_pixel_counter,0
JNZ WRITTEN_SQUARE_TITLE_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE ENDP
;-------------------- END DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE --------------------; (Original comment: FIM QUADRADO)

;-------------------- START DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE --------------------; (Original comment: INÍCIO QUADRADO)
DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE PROC ; Original: QUADRADO_escrito_op
PUSH AX
PUSH BX
PUSH CX
PUSH DX

MOV column_counter,0
MOV square_pixel_counter, 4 ; Original: cont_quadrado (2x2 scaled pixel)

MOV AX, Current_Column
MUL text_char_pixel_spacing ; Original: separador_quadrado_escrito
MOV char_pixel_draw_column, AX

MOV AX, Current_Row
MUL text_char_pixel_spacing
MOV char_pixel_draw_row, AX

WRITTEN_SQUARE_OPTION_LOOP: ; Original: VEZES_BRANCO_escrito
CMP column_counter,2
JNE DONT_NEWLINE_WRITTEN_SQUARE_OPTION_LOGIC
;new line

MOV column_counter,0
MOV AX, Current_Column
MUL text_char_pixel_spacing
MOV char_pixel_draw_column, AX


INC char_pixel_draw_row

DONT_NEWLINE_WRITTEN_SQUARE_OPTION_LOGIC: ; Original: nao_pula_BRANCO_escrito
        ;printing
        mov cx, char_pixel_draw_column  ; column
        mov dx, char_pixel_draw_row     ; row
        mov al, current_color           ; CHOSEN COLOR (Original comment: COR ESCOLHIDA)
        mov ah, 0Ch                     ; put pixel
        int 10h

INC char_pixel_draw_column

;ADD BX,2

INC column_counter
DEC square_pixel_counter
CMP square_pixel_counter,0
JNZ WRITTEN_SQUARE_OPTION_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE ENDP
;-------------------- END DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE --------------------; 

;-------------------- START DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE --------------------; (Original comment: INÍCIO QUADRADO)
DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE PROC ; Original: QUADRADO_lives
PUSH AX
PUSH BX
PUSH CX
PUSH DX

MOV column_counter,0
MOV square_pixel_counter, 900 ; Original: cont_quadrado (30x30 area)

MOV AX, Current_Column ; Uses parameter passed in Current_Column
MOV char_pixel_draw_column, AX ; Original: coluna_quadrado

MOV AX, Current_Row ; Uses parameter passed in Current_Row
MOV char_pixel_draw_row, AX ; Original: linha_quadrado

DRAW_LIVES_SQUARE_BLACK_LOOP: ; Original: VEZES_BRANCO_lives
CMP column_counter,30
JNE DONT_NEWLINE_LIVES_SQUARE_DRAW_LOOP
;new line (Original comment: pula linha)

MOV column_counter,0
MOV AX, Current_Column
MOV char_pixel_draw_column, AX


INC char_pixel_draw_row

DONT_NEWLINE_LIVES_SQUARE_DRAW_LOOP: ; Original: nao_pula_BRANCO_lives
      ;printing
      mov cx, char_pixel_draw_column  ; column
      mov dx, char_pixel_draw_row     ; row
      mov al, 00                      ; CHOSEN COLOR (Original comment: COR ESCOLHIDA, draws black)
      mov ah, 0Ch                     ; put pixel
      int 10h

INC char_pixel_draw_column

;ADD BX,2 ; Not used for sprite data addressing in this specific proc

INC column_counter
DEC square_pixel_counter
CMP square_pixel_counter,0
JNZ DRAW_LIVES_SQUARE_BLACK_LOOP

POP DX
POP CX
POP BX
POP AX

RET
DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE ENDP
;-------------------- END DRAW_SQUARE_FOR_LIVES_DISPLAY_PROCEDURE --------------------; (Original comment: FIM QUADRADO)

;----------------------- START CHOOSE_MAP_PROCEDURE -----------------------------;
CHOOSE_MAP_PROCEDURE PROC
    
    XOR BX,BX
    XOR AX,AX
    MOV generic_counter, 418 ; Number of map tiles
    CMP selected_map_id, 1
    JE LOAD_MAP_LEVEL1_DATA_HANDLER
    
    CMP selected_map_id, 2
    JE LOAD_MAP_LEVEL2_DATA_HANDLER
    
    CMP selected_map_id, 3
    JE LOAD_MAP_LEVEL3_DATA_HANDLER
    
    JMP END_CHOOSE_MAP_LOGIC_HANDLER
    
LOAD_MAP_LEVEL1_DATA_HANDLER:   MOV map_color_attribute, 9
                                MOV pellets_for_chosen_map_total, 153 ; Original: Pastilhas_mapa_escolhido
                                
COPY_MAP1_DATA_LOOP_HANDLER:
                                MOV AX, Level1_Map[BX]
                                MOV Chosen_Level_Map[BX], AX
                                
                                MOV AX, Level1_Pellet[BX]
                                MOV Chosen_Level_Pellet[BX], AX
                                
                                ADD BX,2
                                
                                DEC generic_counter
                                CMP generic_counter,0
                                JNE COPY_MAP1_DATA_LOOP_HANDLER
                                
                                JMP END_CHOOSE_MAP_LOGIC_HANDLER
                                
LOAD_MAP_LEVEL2_DATA_HANDLER:   MOV map_color_attribute, 11
                                MOV pellets_for_chosen_map_total, 184
    
COPY_MAP2_DATA_LOOP_HANDLER:
                                MOV AX, Level2_Map[BX]
                                MOV Chosen_Level_Map[BX], AX
                                
                                MOV AX, Level2_Pellet[BX]
                                MOV Chosen_Level_Pellet[BX], AX
                                
                                ADD BX,2
                                
                                DEC generic_counter
                                CMP generic_counter,0
                                JNE COPY_MAP2_DATA_LOOP_HANDLER
                                
                                JMP END_CHOOSE_MAP_LOGIC_HANDLER
                                
LOAD_MAP_LEVEL3_DATA_HANDLER:   MOV map_color_attribute, 12
                                MOV pellets_for_chosen_map_total, 166
    
COPY_MAP3_DATA_LOOP_HANDLER:
                                MOV AX, Level3_Map[BX]
                                MOV Chosen_Level_Map[BX], AX
                                
                                MOV AX, Level3_Pellet[BX]
                                MOV Chosen_Level_Pellet[BX], AX
                                
                                ADD BX,2
                                
                                DEC generic_counter
                                CMP generic_counter,0
                                JNE COPY_MAP3_DATA_LOOP_HANDLER
                                
                                JMP END_CHOOSE_MAP_LOGIC_HANDLER
                                
                                
    END_CHOOSE_MAP_LOGIC_HANDLER:
    
RET
CHOOSE_MAP_PROCEDURE ENDP
;----------------------- END CHOOSE_MAP_PROCEDURE -----------------------------;


;------------------------- START PRINT_GAME_OVER_MESSAGE_PROCEDURE -------------------------------
PRINT_GAME_OVER_MESSAGE_PROCEDURE PROC
    
    PUSH AX

        MOV game_over_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var ; Commented out in original
        MOV game_over_message_column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var ; Commented out in original
        MOV game_over_message_row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV game_over_counter, 1056 ;quantity of items in sprite data (88x12 sprite)

        GAME_OVER_DRAW_LOOP_HANDLER:
    
        MOV AX, MSG_GAME_OVER[BX]
    
        CMP game_over_controller,88 ;number of columns in sprite
        JNE DONT_NEWLINE_GAME_OVER_DRAW_HANDLER
        ;new line
        MOV game_over_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV game_over_message_column, AX
        POP AX
        
        INC game_over_message_row
DONT_NEWLINE_GAME_OVER_DRAW_HANDLER:
    
        CMP AX,15 ; Check for pixel data value for Red
        JE DRAW_RED_GAME_OVER_PIXEL_HANDLER
        ;BLACK
        
        mov cx, game_over_message_column  ; column
        mov dx, game_over_message_row     ; row
        mov al, 0                         ; CHOSEN COLOR (Original comment, drawing black)
        mov ah, 0Ch                       ; put pixel
        int 10h
        ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE ; Original: QUADRADO_escrito
        JMP END_DRAW_GAME_OVER_PIXEL_HANDLER
        
DRAW_RED_GAME_OVER_PIXEL_HANDLER: 
                        
                        mov cx, game_over_message_column  ; column
                        mov dx, game_over_message_row     ; row
                        mov al, 4                         ; CHOSEN COLOR (Original comment, drawing red)
                        mov ah, 0Ch                       ; put pixel
                        int 10h
                        JMP END_DRAW_GAME_OVER_PIXEL_HANDLER
        
        END_DRAW_GAME_OVER_PIXEL_HANDLER:
        INC game_over_message_column

        ADD BX,2

        INC game_over_controller
        DEC game_over_counter
        CMP game_over_counter,0
        JNZ GAME_OVER_DRAW_LOOP_HANDLER
    
RET
PRINT_GAME_OVER_MESSAGE_PROCEDURE ENDP
;------------------------- END PRINT_GAME_OVER_MESSAGE_PROCEDURE -------------------------------


;------------------------- START PRINT_VICTORY_MESSAGE_PROCEDURE -------------------------------
PRINT_VICTORY_MESSAGE_PROCEDURE PROC
    
    PUSH AX

        MOV game_over_controller,0 ; Reusing game_over variables for victory message
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV game_over_message_column, AX ; Using game_over_message_column
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV game_over_message_row, AX ; Using game_over_message_row
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV game_over_counter, 888 ;quantity of items in sprite data (74x12 sprite)

        VICTORY_DRAW_LOOP_HANDLER:
    
        MOV AX, MSG_VICTORY[BX]
    
        CMP game_over_controller,74 ;number of columns in sprite
        JNE DONT_NEWLINE_VICTORY_DRAW_HANDLER
        ;new line
        MOV game_over_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV game_over_message_column, AX
        POP AX
        
        INC game_over_message_row
DONT_NEWLINE_VICTORY_DRAW_HANDLER:
    
        CMP AX,14 ; Check for pixel data value for Yellow
        JE DRAW_YELLOW_VICTORY_PIXEL_HANDLER
        ;BLACK
        
        mov cx, game_over_message_column  ; column
        mov dx, game_over_message_row     ; row
        mov al, 0                         ; CHOSEN COLOR (Original comment, drawing black)
        mov ah, 0Ch                       ; put pixel
        int 10h
        ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE
        JMP END_DRAW_VICTORY_PIXEL_HANDLER
        
DRAW_YELLOW_VICTORY_PIXEL_HANDLER: 
                        
                        mov cx, game_over_message_column  ; column
                        mov dx, game_over_message_row     ; row
                        mov al, 14                        ; CHOSEN COLOR (Original comment, drawing yellow)
                        mov ah, 0Ch                       ; put pixel
                        int 10h
                        JMP END_DRAW_VICTORY_PIXEL_HANDLER
        
        END_DRAW_VICTORY_PIXEL_HANDLER:
        INC game_over_message_column

        ADD BX,2

        INC game_over_controller
        DEC game_over_counter
        CMP game_over_counter,0
        JNZ VICTORY_DRAW_LOOP_HANDLER
    
RET
PRINT_VICTORY_MESSAGE_PROCEDURE ENDP
;------------------------- END PRINT_VICTORY_MESSAGE_PROCEDURE -------------------------------

;------------------SCORE-------------------------
DRAW_SIDE_PANEL_SCORE_TEXT_PROCEDURE PROC ; Original: Menu_do_lado

PUSH AX

    MOV lives_display_controller,0
    
    MOV AX,current_pixel_column
    ;MUL lives_column_spacing_var
    MOV Current_Column, AX
    
    MOV AX,current_pixel_row
    ;MUL lives_row_spacing_var
    MOV Current_Row, AX
    
    POP AX
    XOR SI,SI
    XOR BX,BX
    MOV generic_counter, 484 ;quantity of items in sprite data (44x11 sprite)

    SIDE_PANEL_SCORE_TEXT_DRAW_LOOP_HANDLER: ; Original: VEZES_SCORE_ESCRITO

    MOV AX, SCORE_TEXT_SPRITE[BX] ; Original: SCORE

    CMP lives_display_controller,44 ;number of columns in sprite
    JNE DONT_NEWLINE_SIDE_PANEL_SCORE_TEXT_DRAW_HANDLER
    ;new line
    MOV lives_display_controller,0
    
    PUSH AX
    MOV AX,current_pixel_column
    ;MUL lives_column_spacing_var
    MOV Current_Column, AX
    POP AX
    
    INC Current_Row
DONT_NEWLINE_SIDE_PANEL_SCORE_TEXT_DRAW_HANDLER: ; Original: nao_pula_SCORE_ESCRITO

    CMP AX,1 ; Visible part of "SCORE" text sprite
    JE DRAW_WHITE_SIDE_PANEL_SCORE_TEXT_PIXEL_HANDLER
    ;BLACK (Transparent background)
    
    mov cx, Current_Column  ; column
    mov dx, Current_Row     ; row
    mov al, 0               ; CHOSEN COLOR (Original comment, drawing black)
    mov ah, 0Ch             ; put pixel
    int 10h
    ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE
    JMP END_DRAW_SIDE_PANEL_SCORE_TEXT_PIXEL_HANDLER
    
DRAW_WHITE_SIDE_PANEL_SCORE_TEXT_PIXEL_HANDLER: ; Original: BRANCO_SCORE_ESCRITO
            MOV current_color, 15 ; Sets current_color to white
            
            mov cx, Current_Column  ; column
            mov dx, Current_Row     ; row
            mov al, 14              ; CHOSEN COLOR (Original comment, but draws Yellow (14) not White (15))
            mov ah, 0Ch             ; put pixel
            int 10h
            ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE
            JMP END_DRAW_SIDE_PANEL_SCORE_TEXT_PIXEL_HANDLER
    
    END_DRAW_SIDE_PANEL_SCORE_TEXT_PIXEL_HANDLER: ; Original: fim_SCORE_ESCRITO
    INC Current_Column

    ADD BX,2

    INC lives_display_controller
    DEC generic_counter
    CMP generic_counter,0
    JNZ SIDE_PANEL_SCORE_TEXT_DRAW_LOOP_HANDLER

; MOV Current_Column,547 ; Original: COLUNA
; MOV Current_Row,30     ; Original: LINHA
; MOV Quadrant_Column, 0
; MOV Quadrant_Row, 0
; MOV GRID_MATRIX_INDEX, 0 ; Original: MATRIZ
; MOV CURRENT_COLOR_VAR, 0FH ; Original: COR
; Check_Account_Or_Count: ; Original: Verifica_conta
; MOV BX, GRID_MATRIX_INDEX
; CMP [SCORE_TEXT_SPRITE_DATA + BX], 1 ; Original: SCORE
; JE LETS_PRINT_SM_SCORE_HANDLER
; CMP Quadrant_Column, 59
; JE MOVE_DOWN_NUMBER_DRAW_HANDLER
; INC GRID_MATRIX_INDEX
; INC Quadrant_Column
; JMP RESET_START_MAP_1_DRAW_HANDLER ; This label seems contextually for map drawing, not score
; LETS_PRINT_SM_SCORE_HANDLER:
; CMP Quadrant_Column, 59
; JE MOVE_DOWN_NUMBER_DRAW_HANDLER
; MOV Quadrant_Size, 3
; CALL PRINT_QUADRANT_PROCEDURE
; INC Quadrant_Column
; INC GRID_MATRIX_INDEX
; RESET_START_MAP_1_DRAW_HANDLER:
; MOV Current_Column, 500
; MOV Current_Row, 30
; MOV AX, 4
; MUL Quadrant_Row
; ADD Current_Row, AX
; MOV AX, 4 
; MUL Quadrant_Column
; ADD Current_Column, AX
; JMP Check_Account_Or_Count
; MOVE_DOWN_NUMBER_DRAW_HANDLER:
; CMP Quadrant_Row, 9
; JG FINISHED_SIDE_MENU_DRAW_HANDLER
; INC Quadrant_Row
; MOV Quadrant_Column, 0
; INC GRID_MATRIX_INDEX
; JMP RESET_START_MAP_1_DRAW_HANDLER
; FINISHED_SIDE_MENU_DRAW_HANDLER:

    RET
DRAW_SIDE_PANEL_SCORE_TEXT_PROCEDURE ENDP ; Original: Menu_do_lado
;------------------------------------
PRINT_QUADRANT_PROCEDURE PROC
    MOV CX, Current_Column
    ADD CX, Quadrant_Size
    MOV COLUMN_PLUS_OFFSET, CX
    MOV DX, Current_Row
    ADD DX, Quadrant_Size
    MOV ROW_PLUS_OFFSET, DX

PRINT_QUADRANT_PIXEL_LOOP:
    MOV CX, Current_Column
    MOV DX, Current_Row
    MOV AL, 14 ; Yellow color
    MOV AH, 0CH
    INT 10H
    
    CMP CX, COLUMN_PLUS_OFFSET
    JE  MOVE_TO_NEXT_QUADRANT_ROW_HANDLER
    INC Current_Column
    JMP PRINT_QUADRANT_PIXEL_LOOP
MOVE_TO_NEXT_QUADRANT_ROW_HANDLER:
    CMP DX, ROW_PLUS_OFFSET
    JE FINISHED_PRINTING_QUADRANT_HANDLER
    INC Current_Row
    MOV BX, Quadrant_Size
    SUB Current_Column, BX ; Reset column for new row
    JMP PRINT_QUADRANT_PIXEL_LOOP
FINISHED_PRINTING_QUADRANT_HANDLER:
    RET
PRINT_QUADRANT_PROCEDURE ENDP
;-----------------------------------------------------------------------------------
DRAW_SIDE_PANEL_SCORE_DIGITS_PROCEDURE PROC ; Original: Menu_do_lado_score
    MOV AX, total_score
    MOV CX,10
    
    XOR DX, DX
    DIV CX
    MOV Score_Digit_Units,DX ; Original: SCORE_L (Least significant digit)
    
    XOR DX, DX
    DIV CX
    MOV Score_Digit_Tens,DX ; Original: SCORE_B
    
    XOR DX, DX
    DIV CX
    MOV Score_Digit_Hundreds,DX ; Original: SCORE_S
    
    XOR DX, DX
    DIV CX
    MOV Score_Digit_Thousands,DX ; Original: SCORE_Q (Most significant digit)
;----------------------------------------------------------------------------------FIRST DIGIT (Units)
    
    MOV current_pixel_column, 520 ; X position for units digit
    ;MOV CX, current_pixel_column ; Original: COLUNA_pixel
    
    CMP Score_Digit_Units,0
    JE SCORE_L0_UNITS_HANDLER
    
    CMP Score_Digit_Units,1
    JE SCORE_L1_UNITS_HANDLER
    
    CMP Score_Digit_Units,2
    JE SCORE_L2_UNITS_HANDLER
    
    CMP Score_Digit_Units,3
    JE SCORE_L3_UNITS_HANDLER
    
    CMP Score_Digit_Units,4
    JE SCORE_L4_UNITS_HANDLER
    
    CMP Score_Digit_Units,5
    JE SCORE_L5_UNITS_HANDLER
    
    CMP Score_Digit_Units,6
    JE SCORE_L6_UNITS_HANDLER
    
    CMP Score_Digit_Units,7
    JE SCORE_L7_UNITS_HANDLER
    
    CMP Score_Digit_Units,8
    JE SCORE_L8_UNITS_HANDLER
    
    CMP Score_Digit_Units,9
    JE SCORE_L9_UNITS_HANDLER
    
JMP DRAW_SECOND_SCORE_DIGIT_HANDLER

SCORE_L0_UNITS_HANDLER: CALL PRINT_DIGIT_0_SPRITE_PROCEDURE ; Original: IMPRIM_0ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
                        
SCORE_L1_UNITS_HANDLER: CALL PRINT_DIGIT_1_SPRITE_PROCEDURE ; Original: IMPRIM_1ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
                        
SCORE_L2_UNITS_HANDLER: CALL PRINT_DIGIT_2_SPRITE_PROCEDURE ; Original: IMPRIM_2ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
                        
SCORE_L3_UNITS_HANDLER: CALL PRINT_DIGIT_3_SPRITE_PROCEDURE ; Original: IMPRIM_3ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
    
SCORE_L4_UNITS_HANDLER: CALL PRINT_DIGIT_4_SPRITE_PROCEDURE ; Original: IMPRIM_4ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
                        
SCORE_L5_UNITS_HANDLER: CALL PRINT_DIGIT_5_SPRITE_PROCEDURE ; Original: IMPRIM_5ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
    
SCORE_L6_UNITS_HANDLER: CALL PRINT_DIGIT_6_SPRITE_PROCEDURE ; Original: IMPRIM_6ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
; END SHERWIN
; START JM  
SCORE_L7_UNITS_HANDLER: CALL PRINT_DIGIT_7_SPRITE_PROCEDURE ; Original: IMPRIM_7ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
    
SCORE_L8_UNITS_HANDLER: CALL PRINT_DIGIT_8_SPRITE_PROCEDURE ; Original: IMPRIM_8ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
    
SCORE_L9_UNITS_HANDLER: CALL PRINT_DIGIT_9_SPRITE_PROCEDURE ; Original: IMPRIM_9ALG
                        JMP DRAW_SECOND_SCORE_DIGIT_HANDLER
;----------------------------------------------------------------------------------SECOND DIGIT (Tens)
DRAW_SECOND_SCORE_DIGIT_HANDLER: ; Original: SEGUNDO_DIGITO

    MOV current_pixel_column, 510 ; X position for tens digit
    ;MOV CX,current_pixel_column
    
    CMP Score_Digit_Tens,0
    JE SCORE_B0_TENS_HANDLER
    
    CMP Score_Digit_Tens,1
    JE SCORE_B1_TENS_HANDLER
    
    CMP Score_Digit_Tens,2
    JE SCORE_B2_TENS_HANDLER
    
    CMP Score_Digit_Tens,3
    JE SCORE_B3_TENS_HANDLER
    
    CMP Score_Digit_Tens,4
    JE SCORE_B4_TENS_HANDLER
    
    CMP Score_Digit_Tens,5
    JE SCORE_B5_TENS_HANDLER
    
    CMP Score_Digit_Tens,6
    JE SCORE_B6_TENS_HANDLER 

    CMP Score_Digit_Tens,7
    JE SCORE_B7_TENS_HANDLER
    
    CMP Score_Digit_Tens,8
    JE SCORE_B8_TENS_HANDLER
    
    CMP Score_Digit_Tens,9
    JE SCORE_B9_TENS_HANDLER
    
JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B0_TENS_HANDLER:
    CALL PRINT_DIGIT_0_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B1_TENS_HANDLER:
    CALL PRINT_DIGIT_1_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B2_TENS_HANDLER:
    CALL PRINT_DIGIT_2_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B3_TENS_HANDLER:
    CALL PRINT_DIGIT_3_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B4_TENS_HANDLER:
    CALL PRINT_DIGIT_4_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B5_TENS_HANDLER:
    CALL PRINT_DIGIT_5_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B6_TENS_HANDLER:
    CALL PRINT_DIGIT_6_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B7_TENS_HANDLER:
    CALL PRINT_DIGIT_7_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B8_TENS_HANDLER:
    CALL PRINT_DIGIT_8_SPRITE_PROCEDURE
    JMP DRAW_THIRD_SCORE_DIGIT_HANDLER
    
SCORE_B9_TENS_HANDLER:
    CALL PRINT_DIGIT_9_SPRITE_PROCEDURE
    
;----------------------------------------------------------------------------------THIRD DIGIT (Hundreds)
DRAW_THIRD_SCORE_DIGIT_HANDLER: ; Original: TERC_DIGITO

    MOV current_pixel_column,500 ; X position for hundreds digit
    ;MOV CX,current_pixel_column
    
    CMP Score_Digit_Hundreds,0
    JE SCORE_S0_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,1
    JE SCORE_S1_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,2
    JE SCORE_S2_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,3
    JE SCORE_S3_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,4
    JE SCORE_S4_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,5
    JE SCORE_S5_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,6
    JE SCORE_S6_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,7
    JE SCORE_S7_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,8
    JE SCORE_S8_HUNDREDS_HANDLER
    
    CMP Score_Digit_Hundreds,9
    JE SCORE_S9_HUNDREDS_HANDLER

JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
 
SCORE_S0_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_0_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S1_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_1_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S2_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_2_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S3_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_3_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S4_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_4_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S5_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_5_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S6_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_6_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S7_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_7_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S8_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_8_SPRITE_PROCEDURE
    JMP DRAW_FOURTH_SCORE_DIGIT_HANDLER
    
SCORE_S9_HUNDREDS_HANDLER:
    CALL PRINT_DIGIT_9_SPRITE_PROCEDURE
    
;----------------------------------------------------------------------------------FOURTH DIGIT (Thousands)
DRAW_FOURTH_SCORE_DIGIT_HANDLER: ; Original: QUART_DIGITO

    MOV current_pixel_column,490 ; X position for thousands digit
    ;MOV CX,current_pixel_column
    
    CMP Score_Digit_Thousands,0
    JE SCORE_Q0_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,1
    JE SCORE_Q1_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,2
    JE SCORE_Q2_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,3
    JE SCORE_Q3_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,4
    JE SCORE_Q4_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,5
    JE SCORE_Q5_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,6
    JE SCORE_Q6_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,7
    JE SCORE_Q7_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,8
    JE SCORE_Q8_THOUSANDS_HANDLER
    
    CMP Score_Digit_Thousands,9
    JE SCORE_Q9_THOUSANDS_HANDLER
    
JMP RETURN_FROM_SCORE_DRAWING_HANDLER

SCORE_Q0_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_0_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q1_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_1_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q2_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_2_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q3_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_3_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q4_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_4_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q5_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_5_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q6_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_6_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q7_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_7_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q8_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_8_SPRITE_PROCEDURE
    JMP RETURN_FROM_SCORE_DRAWING_HANDLER
    
SCORE_Q9_THOUSANDS_HANDLER:
    CALL PRINT_DIGIT_9_SPRITE_PROCEDURE
    
RETURN_FROM_SCORE_DRAWING_HANDLER: ; Original: Volta_normal_score

RET
DRAW_SIDE_PANEL_SCORE_DIGITS_PROCEDURE ENDP ; Original: Menu_do_lado_score

PRINT_DIGIT_0_SPRITE_PROCEDURE PROC ;----------------------------------------------------------------------------------PRINT 0 (Original: IMPRIM_0ALG)
    
        PUSH AX
        PUSH BX
        PUSH CX
        PUSH DX
        PUSH AX
        
        MOV score_digit_draw_controller,0 ; Original: controlador_score
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels ; Original: separador_quadrado (commented out in original)
        MOV Current_Column, AX ; Original: coluna
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX ; Original: linha
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in sprite data (7x10 sprite) ; Original: cont, NUM0

        SCORE_DIGIT0_DRAW_LOOP: ; Original: VEZES_SCORE0

        MOV AX, NUMBER0_SPRITE[BX] ; Original: NUM0

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT0_DRAW_LOGIC
        ;new line in sprite (Original comment: pula linha)
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT0_DRAW_LOGIC: ; Original: nao_pula_score0

        CMP AX,1 ; Check for visible pixel in sprite data
        JE DRAW_WHITE_SCORE_DIGIT0_PIXEL_HANDLER
                ;BLACK (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT0_PIXEL_HANDLER

        DRAW_WHITE_SCORE_DIGIT0_PIXEL_HANDLER: ;WHITE (Original comment: BRANCO_SCORE0: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT0_PIXEL_HANDLER: ; Original: fim_SCORE0
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT0_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_0_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_1_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 1
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT1_DRAW_LOOP: ; Original: VEZES_SCORE1

        MOV AX, NUMBER1_SPRITE[BX] ; Original: NUM1

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT1_DRAW
        ;new line in sprite (Original comment: pula linha)
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT1_DRAW: ; Original: nao_pula_score1

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT1_PIXEL
                ;BLACK (Original comment: PRETO)
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT1_PIXEL

        DRAW_WHITE_SCORE_DIGIT1_PIXEL: ;WHITE (Original comment: BRANCO_SCORE1: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT1_PIXEL: ; Original: fim_SCORE1
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT1_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_1_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_2_SPRITE_PROCEDURE PROC;PRINT 2
PUSH AX
PUSH BX
PUSH CX
PUSH DX
PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT2_DRAW_LOOP: ; Original: VEZES_SCORE2

        MOV AX, NUMBER2_SPRITE[BX] ; Original: NUM2

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT2_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT2_DRAW: ; Original: nao_pula_score2

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT2_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT2_PIXEL

        DRAW_WHITE_SCORE_DIGIT2_PIXEL: ;WHITE (Original comment: BRANCO_SCORE2: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT2_PIXEL: ; Original: fim_SCORE2
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT2_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_2_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_3_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 3
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT3_DRAW_LOOP: ; Original: VEZES_SCORE3

        MOV AX, NUMBER3_SPRITE[BX] ; Original: NUM3

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT3_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT3_DRAW: ; Original: nao_pula_score3

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT3_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT3_PIXEL

        DRAW_WHITE_SCORE_DIGIT3_PIXEL: ;WHITE (Original comment: BRANCO_SCORE3: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT3_PIXEL: ; Original: fim_SCORE3
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT3_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_3_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_4_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 4
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT4_DRAW_LOOP: ; Original: VEZES_SCORE4

        MOV AX, NUMBER4_SPRITE[BX] ; Original: NUM4

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT4_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT4_DRAW: ; Original: nao_pula_score4

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT4_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT4_PIXEL

        DRAW_WHITE_SCORE_DIGIT4_PIXEL: ;WHITE (Original comment: BRANCO_SCORE4: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT4_PIXEL: ; Original: fim_SCORE4
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT4_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_4_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_5_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 5
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT5_DRAW_LOOP: ; Original: VEZES_SCORE5

        MOV AX, NUMBER5_SPRITE[BX] ; Original: NUM5

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT5_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT5_DRAW: ; Original: nao_pula_score5

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT5_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT5_PIXEL

        DRAW_WHITE_SCORE_DIGIT5_PIXEL: ;WHITE (Original comment: BRANCO_SCORE5: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT5_PIXEL: ; Original: fim_SCORE5
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT5_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_5_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_6_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 6
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT6_DRAW_LOOP: ; Original: VEZES_SCORE6

        MOV AX, NUMBER6_SPRITE[BX] ; Original: NUM6

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT6_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT6_DRAW: ; Original: nao_pula_score6

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT6_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT6_PIXEL

        DRAW_WHITE_SCORE_DIGIT6_PIXEL: ;WHITE (Original comment: BRANCO_SCORE6: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT6_PIXEL: ; Original: fim_SCORE6
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT6_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_6_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_7_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 7
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT7_DRAW_LOOP: ; Original: VEZES_SCORE7

        MOV AX, NUMBER7_SPRITE[BX] ; Original: NUM7

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT7_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT7_DRAW: ; Original: nao_pula_score7

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT7_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT7_PIXEL

DRAW_WHITE_SCORE_DIGIT7_PIXEL: ;WHITE (Original comment: BRANCO_SCORE7: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT7_PIXEL: ; Original: fim_SCORE7
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT7_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_7_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_8_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 8
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT8_DRAW_LOOP: ; Original: VEZES_SCORE8

        MOV AX, NUMBER8_SPRITE[BX] ; Original: NUM8

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT8_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT8_DRAW: ; Original: nao_pula_score8

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT8_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT8_PIXEL

        DRAW_WHITE_SCORE_DIGIT8_PIXEL: ;WHITE (Original comment: BRANCO_SCORE8: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT8_PIXEL: ; Original: fim_SCORE8
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT8_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_8_SPRITE_PROCEDURE ENDP

PRINT_DIGIT_9_SPRITE_PROCEDURE PROC;----------------------------------------------------------------------------------PRINT 9
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH AX
        
        MOV score_digit_draw_controller,0
        
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL tile_spacing_pixels
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 70 ;quantity of items in the sprite data

        SCORE_DIGIT9_DRAW_LOOP: ; Original: VEZES_SCORE9

        MOV AX, NUMBER9_SPRITE[BX] ; Original: NUM9

        CMP score_digit_draw_controller,7 ;number of columns in sprite
        JNE DONT_NEWLINE_SCORE_DIGIT9_DRAW
        ;new line in sprite
        MOV score_digit_draw_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_SCORE_DIGIT9_DRAW: ; Original: nao_pula_score9

        CMP AX,1
        JE DRAW_WHITE_SCORE_DIGIT9_PIXEL
                ;BLACK
                mov cx, Current_Column  ; column
                mov dx, Current_Row     ; row
                mov al, 0               ; WHITE (Original comment)
                mov ah, 0Ch             ; put pixel
                int 10h
        JMP END_DRAW_SCORE_DIGIT9_PIXEL

        DRAW_WHITE_SCORE_DIGIT9_PIXEL: ;WHITE (Original comment: BRANCO_SCORE9: ;BRANCO)
                        mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; WHITE (Original comment)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                
        END_DRAW_SCORE_DIGIT9_PIXEL: ; Original: fim_SCORE9
        INC Current_Column

        ADD BX,2

        INC score_digit_draw_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ SCORE_DIGIT9_DRAW_LOOP

POP DX
POP CX
POP BX
POP AX

RET
PRINT_DIGIT_9_SPRITE_PROCEDURE ENDP
;------------------------------------------------------------------


;-------------------------------------------------------------------------------------
PRINT_PACMAN_MENU_SPRITE_PROCEDURE PROC 
PUSH AX
; END JM
; START HENKE
        MOV menu_pacman_controller_var,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV menu_pacman_column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV menu_pacman_row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV menu_pacman_counter, 990 ;quantity of items in sprite data (33x30 sprite)

        MENU_PACMAN_DRAW_LOOP: ; Original: VEZES_MENUPAC
    
        MOV AX, PACMAN_MENU_SPRITE[BX] ; Original: PACMAN_MENU
    
        CMP menu_pacman_controller_var,33 ;number of columns
        JNE DONT_NEWLINE_MENU_PACMAN_DRAW_LOGIC
        ;new line
        MOV menu_pacman_controller_var,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV menu_pacman_column, AX
        POP AX
        
        INC menu_pacman_row
DONT_NEWLINE_MENU_PACMAN_DRAW_LOGIC: ; Original: nao_pula_MENUPAC
    
        CMP AX,14 ; Yellow for Pacman body
        JE DRAW_YELLOW_MENU_PACMAN_PIXEL_HANDLER
        CMP AX,15 ; Color for Pacman eye/detail
        JE DRAW_DETAIL_MENU_PACMAN_PIXEL_HANDLER ; Original: BLACK_MENUPAC
        ;BLACK (Transparent part)
        
        mov cx, menu_pacman_column  ; column
        mov dx, menu_pacman_row     ; row
        mov al, 0                   ; CHOSEN COLOR (Original comment, drawing black)
        mov ah, 0Ch                 ; put pixel
        int 10h
        ;CALL DRAW_WRITTEN_SQUARE_PROCEDURE
        JMP END_DRAW_MENU_PACMAN_PIXEL_HANDLER
        
DRAW_YELLOW_MENU_PACMAN_PIXEL_HANDLER: ; Original: AMARELO_MENUPAC
                        
                        mov cx, menu_pacman_column  ; column
                        mov dx, menu_pacman_row     ; row
                        mov al, 14                  ; CHOSEN COLOR (Original comment, drawing yellow)
                        mov ah, 0Ch                 ; put pixel
                        int 10h
                        JMP END_DRAW_MENU_PACMAN_PIXEL_HANDLER
                        
DRAW_DETAIL_MENU_PACMAN_PIXEL_HANDLER: ; Original: BLACK_MENUPAC (Likely for eyes or other details)
                        
                        mov cx, menu_pacman_column  ; column
                        mov dx, menu_pacman_row     ; row
                        mov al, 15                  ; CHOSEN COLOR (Original comment, drawing with color 15)
                        mov ah, 0Ch                 ; put pixel
                        int 10h
                        JMP END_DRAW_MENU_PACMAN_PIXEL_HANDLER
        
        END_DRAW_MENU_PACMAN_PIXEL_HANDLER: ; Original: fim_PACMENU
        INC menu_pacman_column

        ADD BX,2

        INC menu_pacman_controller_var
        DEC menu_pacman_counter
        CMP menu_pacman_counter,0
        JNZ MENU_PACMAN_DRAW_LOOP
    
RET

PRINT_PACMAN_MENU_SPRITE_PROCEDURE ENDP
;-----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------
ERASE_MENU_ARROW_PROCEDURE PROC

PUSH AX

        MOV lives_display_controller,0 ; Reusing lives_display_controller
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 299 ;quantity of items in sprite data (23x13 arrow sprite)

        ERASE_MENU_ARROW_LOOP: ; Original: VEZES_APAGA_SETA_MENU
    
        MOV AX, MENU_ARROW_SPRITE[BX]
    
        CMP lives_display_controller,23 ;number of columns
        JNE DONT_NEWLINE_ERASE_MENU_ARROW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_ERASE_MENU_ARROW_LOGIC: ; Original: nao_pula_APAGA_SETA_MENU
    
        CMP AX,15 ; Check if it was a visible pixel of the arrow
        JE WHITE_PIXEL_WAS_ARROW_TO_ERASE
        ;BLACK (Pixel was not part of arrow, or already background - draw black with scaled square)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 2
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_ERASE_MENU_ARROW_PIXEL_HANDLER
        
WHITE_PIXEL_WAS_ARROW_TO_ERASE: ; Original: BRANCO_APAGA_SETA_MENU
                        MOV current_color, 0 ; Erase by drawing black
                        
                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment, but should be black)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 2
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_ERASE_MENU_ARROW_PIXEL_HANDLER
        
        END_ERASE_MENU_ARROW_PIXEL_HANDLER: ; Original: fim_APAGA_SETA_MENU
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ ERASE_MENU_ARROW_LOOP
    
RET


ERASE_MENU_ARROW_PROCEDURE ENDP
;-----------------------------------------------------------------------------------    


;---------------------------------------------------------------------------
PRINT_DIFFICULTY_TEXT_SPRITE_PROCEDURE PROC ; Original: DIFICULDADE_ESCRITO
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 1080 ;quantity of items in sprite data (90x12 "DIFICULDADE" sprite)

        DIFFICULTY_TEXT_DRAW_LOOP: ; Original: VEZES_DIFICULDADE_ESCRITO
    
        MOV AX, DIFFICULTY_TEXT_SPRITE[BX]
    
        CMP lives_display_controller,90 ;number of columns
        JNE DONT_NEWLINE_DIFFICULTY_TEXT_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_DIFFICULTY_TEXT_DRAW_LOGIC: ; Original: nao_pula_DIFICULDADE_ESCRITO
    
        CMP AX,15 ; Check for visible pixel of text
        JE DRAW_WHITE_DIFFICULTY_TEXT_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 3
        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE
        JMP END_DRAW_DIFFICULTY_TEXT_PIXEL_HANDLER
        
DRAW_WHITE_DIFFICULTY_TEXT_PIXEL_HANDLER: ; Original: BRANCO_DIFICULDADE_ESCRITO
                        MOV current_color, 6 ; Brown color for "DIFICULDADE" text
                        
                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 3
                        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE
                        JMP END_DRAW_DIFFICULTY_TEXT_PIXEL_HANDLER
        
        END_DRAW_DIFFICULTY_TEXT_PIXEL_HANDLER: ; Original: fim_DIFICULDADE_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ DIFFICULTY_TEXT_DRAW_LOOP
    
RET
PRINT_DIFFICULTY_TEXT_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------


;---------------------------------------------------------------------------
PRINT_MAP1_TEXT_SPRITE_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 504 ;quantity of items in sprite data (42x12 "MAPA 1" sprite)

        MAP1_TEXT_DRAW_LOOP: ; Original: VEZES_MAPA1_ESCRITO
    
        MOV AX, MAP1_TEXT_SPRITE[BX] ; Original: MAPA1_ESCRITO
    
        CMP lives_display_controller,42 ;number of columns
        JNE DONT_NEWLINE_MAP1_TEXT_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_MAP1_TEXT_DRAW_LOGIC: ; Original: nao_pula_MAPA1_ESCRITO
    
        CMP AX,15 ; Check for visible pixel of text
        JE DRAW_WHITE_MAP1_TEXT_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 2
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_MAP1_TEXT_PIXEL_HANDLER
        
DRAW_WHITE_MAP1_TEXT_PIXEL_HANDLER: ; Original: BRANCO_MAPA1_ESCRITO
                        MOV current_color, 14 ; Yellow for "MAPA 1" text
                        
                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 2
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_MAP1_TEXT_PIXEL_HANDLER
        
        END_DRAW_MAP1_TEXT_PIXEL_HANDLER: ; Original: fim_MAPA1_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ MAP1_TEXT_DRAW_LOOP
    
RET
PRINT_MAP1_TEXT_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------

;---------------------------------------------------------------------------
PRINT_MAP2_TEXT_SPRITE_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 528 ;quantity of items in sprite data (44x12 "MAPA 2" sprite)

        MAP2_TEXT_DRAW_LOOP: ; Original: VEZES_MAPA2_ESCRITO
    
        MOV AX, MAP2_TEXT_SPRITE[BX] ; Original: MAPA2_ESCRITO
    
        CMP lives_display_controller,44 ;number of columns
        JNE DONT_NEWLINE_MAP2_TEXT_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_MAP2_TEXT_DRAW_LOGIC: ; Original: nao_pula_MAPA2_ESCRITO
    
        CMP AX,15 ; Check for visible pixel of text
        JE DRAW_WHITE_MAP2_TEXT_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 2
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_MAP2_TEXT_PIXEL_HANDLER
        
DRAW_WHITE_MAP2_TEXT_PIXEL_HANDLER: ; Original: BRANCO_MAPA2_ESCRITO
                        MOV current_color, 14

			; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 2
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_MAP2_TEXT_PIXEL_HANDLER
        
        END_DRAW_MAP2_TEXT_PIXEL_HANDLER: ; Original: fim_MAPA2_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ MAP2_TEXT_DRAW_LOOP
    
RET
PRINT_MAP2_TEXT_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------


;---------------------------------------------------------------------------
PRINT_MAP3_TEXT_SPRITE_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 528 ;quantity of items in sprite data (44x12 "MAPA 3" sprite)

        MAP3_TEXT_DRAW_LOOP: ; Original: VEZES_MAPA3_ESCRITO
    
        MOV AX, MAP3_TEXT_SPRITE[BX] ; Original: MAPA3_ESCRITO
    
        CMP lives_display_controller,44 ;number of columns
        JNE DONT_NEWLINE_MAP3_TEXT_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_MAP3_TEXT_DRAW_LOGIC: ; Original: nao_pula_MAPA3_ESCRITO
    
        CMP AX,15 ; Check for visible pixel of text
        JE DRAW_WHITE_MAP3_TEXT_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 2
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_MAP3_TEXT_PIXEL_HANDLER
        
DRAW_WHITE_MAP3_TEXT_PIXEL_HANDLER: ; Original: BRANCO_MAPA3_ESCRITO
                        MOV current_color, 14 ; Yellow for "MAPA 3" text
                        
                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 2
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_MAP3_TEXT_PIXEL_HANDLER
        
        END_DRAW_MAP3_TEXT_PIXEL_HANDLER: ; Original: fim_MAPA3_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ MAP3_TEXT_DRAW_LOOP
    
RET
PRINT_MAP3_TEXT_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------

;---------------------------------------------------------------------------
PRINT_MENU_ARROW_SPRITE_PROCEDURE PROC
    
    PUSH AX

        MOV lives_display_controller,0
        
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        
        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX
        
        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 299 ;quantity of items in sprite data (23x13 arrow sprite)

        MENU_ARROW_DRAW_LOOP: ; Original: VEZES_SETA_MENU
    
        MOV AX, MENU_ARROW_SPRITE[BX]
    
        CMP lives_display_controller,23 ;number of columns
        JNE DONT_NEWLINE_MENU_ARROW_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0
        
        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX
        
        INC Current_Row
DONT_NEWLINE_MENU_ARROW_DRAW_LOGIC: ; Original: nao_pula_SETA_MENU
    
        CMP AX,15 ; Check for visible pixel of arrow (sprite uses 15 for arrow color)
        JE DRAW_WHITE_MENU_ARROW_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0
        
        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        MOV text_char_pixel_spacing, 2
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_MENU_ARROW_PIXEL_HANDLER
        
DRAW_WHITE_MENU_ARROW_PIXEL_HANDLER: ; Original: BRANCO_SETA_MENU
                        MOV current_color, 14 ; Yellow color for the arrow (sprite data is 15, but draws 14)
                        
                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        MOV text_char_pixel_spacing, 2
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_MENU_ARROW_PIXEL_HANDLER
        
        END_DRAW_MENU_ARROW_PIXEL_HANDLER: ; Original: fim_SETA_MENU
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ MENU_ARROW_DRAW_LOOP
    
RET
PRINT_MENU_ARROW_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------


;---------------------------------------------------------------------------
ERASE_PACMAN_MENU_CURSOR_PROCEDURE PROC ; Original: APAGA_PACMAN_MENU

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 204 ;quantity of items in sprite data (17x12 Pacman cursor sprite)

        ERASE_PACMAN_CURSOR_LOOP: ; Original: VEZES_APAGA_ESCRITO

        MOV AX, PACMAN_TEXT_SPRITE[BX] ; Original: PACMAN_ESCRITO

        CMP lives_display_controller,17 ;number of columns
        JNE DONT_NEWLINE_ERASE_PACMAN_CURSOR_LOGIC
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_ERASE_PACMAN_CURSOR_LOGIC: ; Original: nao_pula_APAGA_ESCRITO

        CMP AX,14 ; Check for Pacman body color in sprite
        JE ERASE_YELLOW_PACMAN_CURSOR_PIXEL_HANDLER
        ;BLACK (Original comment: PRETO)
        CMP AX,15 ; Check for Pacman eye/detail color in sprite
        JE ERASE_DETAIL_PACMAN_CURSOR_PIXEL_HANDLER
        MOV current_color, 0 ; This path for other values (like 00)

        
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_ERASE_PACMAN_CURSOR_PIXEL_HANDLER

ERASE_YELLOW_PACMAN_CURSOR_PIXEL_HANDLER: ; Original: BRANCO_APAGA_ESCRITO
                        MOV current_color, 00 ; Erase with black
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_ERASE_PACMAN_CURSOR_PIXEL_HANDLER
ERASE_DETAIL_PACMAN_CURSOR_PIXEL_HANDLER: ; Original: BLACK_APAGA_ESCRITO
                        MOV current_color, 00 ; Erase with black
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_ERASE_PACMAN_CURSOR_PIXEL_HANDLER

        END_ERASE_PACMAN_CURSOR_PIXEL_HANDLER: ; Original: fim_APAGA_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ ERASE_PACMAN_CURSOR_LOOP

RET
ERASE_PACMAN_MENU_CURSOR_PROCEDURE ENDP
;-------------------------------------------------------------------------------------

;---------------------------------------------------------------------------
PRINT_PACMAN_TEXT_SPRITE1_PROCEDURE PROC ; Original: PACMAN_ESCRITO1

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 204 ;quantity of items in sprite data (17x12 Pacman cursor sprite)

        PACMAN_TEXT_SPRITE1_DRAW_LOOP: ; Original: VEZES_PACMAN_ESCRITO

        MOV AX, PACMAN_TEXT_SPRITE[BX]

        CMP lives_display_controller,17 ;number of columns
        JNE DONT_NEWLINE_PACMAN_TEXT_SPRITE1_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_PACMAN_TEXT_SPRITE1_DRAW_LOGIC: ; Original: nao_pula_PACMAN_ESCRITO

        CMP AX,14 ; Pacman body color
        JE DRAW_YELLOW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER
        ;BLACK (Original comment: PRETO)
        CMP AX,15 ; Pacman eye/detail color
        JE DRAW_DETAIL_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER
        MOV current_color, 0 ; For transparent parts of sprite (value 00)

        
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER

DRAW_YELLOW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: BRANCO_PACMAN_ESCRITO
                        MOV current_color, 14 ; Yellow for Pacman body
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER
DRAW_DETAIL_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: BLACK_PACMAN_ESCRITO
                        MOV current_color, 15 ; Color for Pacman eye/detail
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER

        END_DRAW_PACMAN_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: fim_PACMAN_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ PACMAN_TEXT_SPRITE1_DRAW_LOOP

RET
PRINT_PACMAN_TEXT_SPRITE1_PROCEDURE ENDP
;-------------------------------------------------------------------------------------




;---------------------------------------------------------------------------
PRINT_EXIT_TEXT_SPRITE1_PROCEDURE PROC ; Original: EXIT_ESCRITO1

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 420 ;quantity of items in sprite data (35x12 "SAIR" sprite)

        EXIT_TEXT_SPRITE1_DRAW_LOOP: ; Original: VEZES_SAIR_ESCRITO

        MOV AX, EXIT_TEXT_SPRITE[BX]

        CMP lives_display_controller,35 ;number of columns
        JNE DONT_NEWLINE_EXIT_TEXT_SPRITE1_DRAW_LOGIC
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_EXIT_TEXT_SPRITE1_DRAW_LOGIC: ; Original: nao_pula_SAIR_ESCRITO

        CMP AX,14 ; Check for visible pixel of text (Yellow)
        JE DRAW_WHITE_EXIT_TEXT_SPRITE1_PIXEL_HANDLER ; Original: BRANCO_SAIR_ESCRITO (label uses "white" but color is yellow)
        ;BLACK (Transparent background)
        MOV current_color, 0

        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_EXIT_TEXT_SPRITE1_PIXEL_HANDLER

DRAW_WHITE_EXIT_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: BRANCO_SAIR_ESCRITO
                        MOV current_color, 14 ; Yellow for "SAIR" text

                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_EXIT_TEXT_SPRITE1_PIXEL_HANDLER

        END_DRAW_EXIT_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: fim_SAIR_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ EXIT_TEXT_SPRITE1_DRAW_LOOP

RET
PRINT_EXIT_TEXT_SPRITE1_PROCEDURE ENDP
;-------------------------------------------------------------------------------------



;---------------------------------------------------------------------------
PRINT_CREDITS_TEXT_SPRITE1_PROCEDURE PROC ; Original: CREDITS_ESCRITO1

    PUSH AX

        MOV lives_display_controller,0 ; Original: controlador_lives

        MOV AX,current_pixel_column ; Original: coluna_pixel
        ;MUL lives_column_spacing_var ; Original: separador_lives_coluna
        MOV Current_Column, AX ; Original: coluna

        MOV AX,current_pixel_row ; Original: linha_pixel
        ;MUL lives_row_spacing_var ; Original: separador_lives_linha
        MOV Current_Row, AX ; Original: linha

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 792 ;quantity of items in sprite data (66x12 sprite) ; Original: cont

        CREDITS_TEXT_SPRITE1_DRAW_LOOP_HANDLER: ; Original: VEZES_CREDITOS_ESCRITO

        MOV AX, CREDITS_TEXT_SPRITE[BX] ; Original: CREDITOS_ESCRITO

        CMP lives_display_controller,66 ;number of columns ; Original: quantidade de colunas
        JNE DONT_NEWLINE_CREDITS_TEXT_SPRITE1_DRAW_HANDLER
        ;new line (Original comment: pula linha)
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_CREDITS_TEXT_SPRITE1_DRAW_HANDLER: ; Original: nao_pula_CREDITOS_ESCRITO

        CMP AX,15
        JE DRAW_WHITE_CREDITS_TEXT_SPRITE1_PIXEL_HANDLER
        ;BLACK (Original comment: PRETO)
        MOV current_color, 0

        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment: COR ESCOLHIDA)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE ; Original: QUADRADO_escrito_op
        JMP END_DRAW_CREDITS_TEXT_SPRITE1_PIXEL_HANDLER

DRAW_WHITE_CREDITS_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: BRANCO_CREDITOS_ESCRITO
                        MOV current_color, 14 ; Yellow for "CREDITS" text

                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment: COR ESCOLHIDA)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_CREDITS_TEXT_SPRITE1_PIXEL_HANDLER

        END_DRAW_CREDITS_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: fim_CREDITOS_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ CREDITS_TEXT_SPRITE1_DRAW_LOOP_HANDLER

RET
PRINT_CREDITS_TEXT_SPRITE1_PROCEDURE ENDP
;-------------------------------------------------------------------------------------



;---------------------------------------------------------------------------
PRINT_LEVELS_TEXT_SPRITE_PROCEDURE PROC ; Original: levels_ESCRITO

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 828 ;quantity of items in sprite data (69x12 sprite)

        LEVELS_TEXT_DRAW_LOOP_HANDLER: ; Original: VEZES_LEVELS_ESCRITO

        MOV AX, LEVELS_TEXT_SPRITE[BX] ; Original: LEVELS_ESCRITA

        CMP lives_display_controller,69 ;number of columns
        JNE DONT_NEWLINE_LEVELS_TEXT_DRAW_HANDLER
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_LEVELS_TEXT_DRAW_HANDLER: ; Original: nao_pula_LEVELS_ESCRITO

        CMP AX,14 ; Yellow color for "LEVELS" text
        JE DRAW_WHITE_LEVELS_TEXT_PIXEL_HANDLER ; Original label was BRANCO_... but color is Yellow
        ;BLACK (Transparent background)
        MOV current_color, 0

        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_LEVELS_TEXT_PIXEL_HANDLER

DRAW_WHITE_LEVELS_TEXT_PIXEL_HANDLER: ; Original: BRANCO_LEVELS_ESCRITO
                        MOV current_color, 14 ; Yellow for "LEVELS" text

                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_LEVELS_TEXT_PIXEL_HANDLER

        END_DRAW_LEVELS_TEXT_PIXEL_HANDLER: ; Original: fim_LEVELS_ESCRITO
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ LEVELS_TEXT_DRAW_LOOP_HANDLER

RET
PRINT_LEVELS_TEXT_SPRITE_PROCEDURE ENDP
;-------------------------------------------------------------------------------------


;---------------------------------------------------------------------------
PRINT_MENU_TEXT_SPRITE1_PROCEDURE PROC ; Original: menu_ESCRITO1

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 492 ;quantity of items in sprite data (41x12 "MENU" sprite)

        MENU_TEXT_SPRITE1_DRAW_LOOP_HANDLER: ; Original: VEZES_MENU_PRINCIPAL_ESCRITO

        MOV AX, MENU_TEXT_SPRITE[BX] ; Original: MENU_ESCRITO

        CMP lives_display_controller,41 ;number of columns
        JNE DONT_NEWLINE_MENU_TEXT_SPRITE1_DRAW_HANDLER
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_MENU_TEXT_SPRITE1_DRAW_HANDLER: ; Original: nao_pula_MENU_PRINCIPAL_ESCRITO

        CMP AX,6 ; Brown color for "MENU" text
        JE DRAW_WHITE_MENU_TEXT_SPRITE1_PIXEL_HANDLER ; Original label was BRANCO_...
        ;BLACK (Transparent background)
        MOV current_color, 0

        ; mov cx, Current_Column  ; column
        ; mov dx, Current_Row     ; row
        ; mov al, 0               ; CHOSEN COLOR (Original comment)
        ; mov ah, 0Ch             ; put pixel
        ; int 10h
        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE ; Using title variant for potentially larger scaling
        JMP END_DRAW_MENU_TEXT_SPRITE1_PIXEL_HANDLER

DRAW_WHITE_MENU_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: BRANCO_MENU_PRINCIPAL_ESCRITO
                        MOV current_color, 6 ; Brown color for "MENU" text

                        ; mov cx, Current_Column  ; column
                        ; mov dx, Current_Row     ; row
                        ; mov al, 14              ; CHOSEN COLOR (Original comment, but drawing Brown)
                        ; mov ah, 0Ch             ; put pixel
                        ; int 10h
                        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE
                        JMP END_DRAW_MENU_TEXT_SPRITE1_PIXEL_HANDLER

        END_DRAW_MENU_TEXT_SPRITE1_PIXEL_HANDLER: ; Original: fim_MENU_PRINCIPAL_ESCRITO
        INC Current_Column
; END HENKE
; START JARILLO
        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ MENU_TEXT_SPRITE1_DRAW_LOOP_HANDLER

RET
PRINT_MENU_TEXT_SPRITE1_PROCEDURE ENDP
;-------------------------------------------------------------------------------------


;-----------------------------------------------------------------------------------------
DISPLAY_DIFFICULTY_MENU_PROCEDURE PROC ; Original: MENU_DIFICULDADE
;--------------------------------
MOV selected_map_id, 1 ; Default to map 1 ; Original: Mapa_escolhido
;--------------------------------

    MOV current_pixel_column, 340
    MOV current_pixel_row, 10
    CALL PRINT_DIFFICULTY_TEXT_SPRITE_PROCEDURE ; Original: DIFICULDADE_ESCRITO
    
    MOV current_pixel_column, 55
    MOV current_pixel_row, 70
    CALL PRINT_MAP1_TEXT_SPRITE_PROCEDURE ; Original: PRINT_MAPA1_ESCRITO
    
    MOV current_pixel_column, 55
    MOV current_pixel_row, 110
    CALL PRINT_MAP2_TEXT_SPRITE_PROCEDURE ; Original: PRINT_MAPA2_ESCRITO
    
    MOV current_pixel_column, 55
    MOV current_pixel_row, 150
    CALL PRINT_MAP3_TEXT_SPRITE_PROCEDURE ; Original: PRINT_MAPA3_ESCRITO
    
    MOV current_pixel_column, 20 ; Initial position for arrow
    MOV current_pixel_row, 70
    CALL PRINT_MENU_ARROW_SPRITE_PROCEDURE ; Original: PRINT_SETA_MENU
    
    ;--------------------------
    ;CALL PRINT_MENU_ARROW_SPRITE_PROCEDURE ; Redundant call? Or for a different arrow?

DIFFICULTY_MENU_INPUT_LOOP_HANDLER: ; Original: loop_enter_DIFICULDADE


    MOV AH, 0 ;Get keystroke function
    INT 16H   ;Keyboard interrupt

    CMP AL, 13 ; Enter key
    JE END_DIFFICULTY_MENU_LOOP_HANDLER
    
    CMP AH,50H ; Down Arrow key
    JE DIFFICULTY_MENU_DOWN_ARROW_HANDLER

    CMP AH,48H ; Up Arrow key
    JE DIFFICULTY_MENU_UP_ARROW_HANDLER
    
    JMP DIFFICULTY_MENU_INPUT_LOOP_HANDLER

    
DIFFICULTY_MENU_DOWN_ARROW_HANDLER: ; Original: SETA_BAIXO_MENU_DIFICULDADE
                        CMP selected_map_id,3
                        JE DIFFICULTY_MENU_INPUT_LOOP_HANDLER ; Already at last option
                        
                        ;IF IT IS LESS THAN 3 (Original comment: SE FOR MENOR DO QUE 3)
                        INC selected_map_id
                        CALL ERASE_MENU_ARROW_PROCEDURE ; Original: APAGA_SETA_MENU
                        ADD current_pixel_row,40 ; Move arrow down

                        CALL PRINT_MENU_ARROW_SPRITE_PROCEDURE
                        JMP DIFFICULTY_MENU_INPUT_LOOP_HANDLER
    
DIFFICULTY_MENU_UP_ARROW_HANDLER: ; Original: SETA_CIMA_MENU_DIFICULDADE
                        CMP selected_map_id,1
                        JE DIFFICULTY_MENU_INPUT_LOOP_HANDLER ; Already at first option
                        
                        ;IF IT IS GREATER THAN 1 (Original comment: SE FOR MAIOR DO QUE 1)
                        DEC selected_map_id

                        CALL ERASE_MENU_ARROW_PROCEDURE
                        SUB current_pixel_row,40 ; Move arrow up

                        CALL PRINT_MENU_ARROW_SPRITE_PROCEDURE
                        JMP DIFFICULTY_MENU_INPUT_LOOP_HANDLER

END_DIFFICULTY_MENU_LOOP_HANDLER: ; Original: fim_loop_menu_DIFICULDADE
                        
                        ;MOV AH,4CH ; Terminate program
                        ;INT 21H            
;--------------------------------------------------------------------
MOV AX, 4F02H ; VESA Set Video Mode
MOV BX, 103H  ; Mode (e.g. 800x600 256 color or 640x480 256 color)
INT 10H       ; Video Interrupt

RET
DISPLAY_DIFFICULTY_MENU_PROCEDURE ENDP
;-----------------------------------------------------------------------------------------

;-------------------------------------------------------------------
; ZERO_MATRIX_PROCEDURE PROC ; Original: ZERA_MATRIZ
    
    ; XOR BX,BX
    ; XOR AX,AX
    ; MOV generic_counter, 418 ; Original: cont
    
    ; ZERO_MATRIX_LOOP_HANDLER: ; Original: LOOP_ZERA_MATRIZ
    ; MOV Chosen_Level_Map[BX], 0
    ; MOV Chosen_Level_Pellet[BX], 0
    
    ; ADD BX,2
    
    ; DEC generic_counter
    ; CMP generic_counter,0
    ; JNE ZERO_MATRIX_LOOP_HANDLER
    
; RET
; ZERO_MATRIX_PROCEDURE ENDP
;-------------------------------------------------------------------

;------------------------------------------------------------------------------ 

;------------------------------------------------------------------------------ 
    
;------------------------------------------------------------------------------
PRINT_CREDITS_GIULY_PROCEDURE PROC ; Original: CREDITOS_Giuly

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 936 ;quantity of items in sprite data (78x12 sprite)

        CREDITS_GIULY_DRAW_LOOP_HANDLER: ; Original: VEZES_CREDITOS_SANFINS

        MOV AX, CREDITS_SANFINS_TEXT_SPRITE[BX] ; Original: CREDITOS_SANFINS

        CMP lives_display_controller,78 ;number of columns
        JNE DONT_NEWLINE_CREDITS_GIULY_DRAW_HANDLER
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_CREDITS_GIULY_DRAW_HANDLER: ; Original: nao_pula_CREDITOS_SANFINS

        CMP AX,14 ; Check for visible pixel (Yellow)
        JE DRAW_WHITE_CREDITS_GIULY_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0

        
        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
        JMP END_DRAW_CREDITS_GIULY_PIXEL_HANDLER

DRAW_WHITE_CREDITS_GIULY_PIXEL_HANDLER: ; Original: BRANCO_CREDITOS_SANFINS
                        MOV current_color, 14 ; Yellow

                        
                        CALL DRAW_WRITTEN_SQUARE_OPTION_PROCEDURE
                        JMP END_DRAW_CREDITS_GIULY_PIXEL_HANDLER

        END_DRAW_CREDITS_GIULY_PIXEL_HANDLER: ; Original: fim_CREDITOS_SANFINS
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ CREDITS_GIULY_DRAW_LOOP_HANDLER

RET
PRINT_CREDITS_GIULY_PROCEDURE ENDP
;------------------------------------------------------------------------------ 
    
;------------------------------------------------------------------------------
PRINT_ALL_CREDITS_PROCEDURE PROC ; Original: CREDITOS_TODOS

    PUSH AX

        MOV lives_display_controller,0

        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        ;MUL lives_row_spacing_var
        MOV Current_Row, AX

        POP AX
        XOR SI,SI  
        XOR BX,BX
        MOV generic_counter, 792 ;quantity of items in sprite data (66x12 sprite, uses "CREDITS_ESCRITO" data)

        ALL_CREDITS_DRAW_LOOP_HANDLER: ; Original: VEZES_CREDITOS_TODOS

        MOV AX, CREDITS_TEXT_SPRITE[BX] ; Original: CREDITOS_ESCRITO

        CMP lives_display_controller,66 ;number of columns
        JNE DONT_NEWLINE_ALL_CREDITS_DRAW_HANDLER
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        ;MUL lives_column_spacing_var
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_ALL_CREDITS_DRAW_HANDLER: ; Original: nao_pula_CREDITOS_TODOS

        CMP AX,15 ; Check for visible pixel (White for "CREDITOS" text)
        JE DRAW_WHITE_ALL_CREDITS_PIXEL_HANDLER
        ;BLACK (Transparent background)
        MOV current_color, 0

        
        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE ; Uses title variant for scaling
        JMP END_DRAW_ALL_CREDITS_PIXEL_HANDLER

DRAW_WHITE_ALL_CREDITS_PIXEL_HANDLER: ; Original: BRANCO_CREDITOS_TODOS
                        MOV current_color, 6 ; Brown color for "CREDITOS" title (sprite data is 15, but draws Brown)

                        
                        CALL DRAW_WRITTEN_SQUARE_TITLE_PROCEDURE
                        JMP END_DRAW_ALL_CREDITS_PIXEL_HANDLER

        END_DRAW_ALL_CREDITS_PIXEL_HANDLER: ; Original: fim_CREDITOS_TODOS
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ ALL_CREDITS_DRAW_LOOP_HANDLER

RET
PRINT_ALL_CREDITS_PROCEDURE ENDP
;------------------------------------------------------------------------------


;-----------------------------------------------------
DISPLAY_CREDITS_SCREEN_PROCEDURE PROC ; Original: PRINT_CREDITOS
    
    mov current_pixel_column,675
    mov current_pixel_row,10
    CALL PRINT_ALL_CREDITS_PROCEDURE ; Draws "CREDITOS" title
    
    mov current_pixel_column,300
    mov current_pixel_row,45
    CALL PRINT_CREDITS_GIULY_PROCEDURE ; Draws "SANFINS" (Giuly's credit)
    
    ;mov current_pixel_column,300
    ;mov current_pixel_row,90
    ;CALL PRINT_CREDITS_JEFF_PROCEDURE ; Draws "MENESES" (Jeff's credit)
    
    mov ah, 0 ; Wait for key press
    int 16h
    
RET
DISPLAY_CREDITS_SCREEN_PROCEDURE ENDP
;-----------------------------------------------------

;---------------------------------------------------------------------------------------------------
PRINT_FRUIT_SPRITE_PROCEDURE PROC

PUSH AX

        MOV lives_display_controller,0

        MOV current_pixel_column, 10 ; Hardcoded X position for fruit
        MOV current_pixel_row, 13  ; Hardcoded Y position for fruit
        
        
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        MOV Current_Column, AX

        MOV AX,current_pixel_row
        MUL tile_spacing_pixels
        MOV Current_Row, AX

        POP AX ; This POP AX seems premature, or PUSH AX at start was for something else
        XOR SI,SI
        XOR BX,BX
        MOV generic_counter, 400 ;quantity of items in sprite data (20x20 fruit sprite)

        FRUIT_DRAW_LOOP_HANDLER: ; Original: VEZES_FRUTA

        MOV AX, FRUIT_SPRITE[BX]

        CMP lives_display_controller,20 ;number of columns
        JNE DONT_NEWLINE_FRUIT_DRAW_HANDLER
        ;new line
        MOV lives_display_controller,0

        PUSH AX
        MOV AX,current_pixel_column
        MUL tile_spacing_pixels
        MOV Current_Column, AX
        POP AX

        INC Current_Row
DONT_NEWLINE_FRUIT_DRAW_HANDLER: ; Original: nao_pula_FRUTA

        CMP AX,6 ; Brown color in fruit sprite
        JE DRAW_BROWN_FRUIT_PIXEL_HANDLER
        
        CMP AX,4 ; Red color in fruit sprite
        JE DRAW_RED_FRUIT_PIXEL_HANDLER
        
        CMP AX,15 ; White color in fruit sprite
        JE DRAW_WHITE_FRUIT_PIXEL_HANDLER
        
        JMP END_DRAW_FRUIT_PIXEL_HANDLER ; For 00 (transparent), do nothing or draw background

DRAW_BROWN_FRUIT_PIXEL_HANDLER: mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 6               ; CHOSEN COLOR (Original comment, drawing Brown)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        JMP END_DRAW_FRUIT_PIXEL_HANDLER
                        
DRAW_RED_FRUIT_PIXEL_HANDLER:   mov cx, Current_Column  ; column
                                mov dx, Current_Row     ; row
                                mov al, 4               ; CHOSEN COLOR (Original comment, drawing Red)
                                mov ah, 0Ch             ; put pixel
                                int 10h
                                JMP END_DRAW_FRUIT_PIXEL_HANDLER

DRAW_WHITE_FRUIT_PIXEL_HANDLER: mov cx, Current_Column  ; column
                        mov dx, Current_Row     ; row
                        mov al, 15              ; CHOSEN COLOR (Original comment, drawing White)
                        mov ah, 0Ch             ; put pixel
                        int 10h
                        JMP END_DRAW_FRUIT_PIXEL_HANDLER

        END_DRAW_FRUIT_PIXEL_HANDLER: ; Original: fim_FRUTA
        INC Current_Column

        ADD BX,2

        INC lives_display_controller
        DEC generic_counter
        CMP generic_counter,0
        JNZ FRUIT_DRAW_LOOP_HANDLER

RET
PRINT_FRUIT_SPRITE_PROCEDURE ENDP
;---------------------------------------------------------------------------------------------------

END MAIN_PROC ; End of MAIN_PROC, assuming this is where the main procedure block ends.
; END JARILLO
